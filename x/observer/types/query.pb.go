// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: observer/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	common "github.com/zeta-chain/zetacore/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryBallotByIdentifierRequest struct {
	BallotIdentifier string `protobuf:"bytes,1,opt,name=ballot_identifier,json=ballotIdentifier,proto3" json:"ballot_identifier,omitempty"`
}

func (m *QueryBallotByIdentifierRequest) Reset()         { *m = QueryBallotByIdentifierRequest{} }
func (m *QueryBallotByIdentifierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBallotByIdentifierRequest) ProtoMessage()    {}
func (*QueryBallotByIdentifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{2}
}
func (m *QueryBallotByIdentifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotByIdentifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotByIdentifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotByIdentifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotByIdentifierRequest.Merge(m, src)
}
func (m *QueryBallotByIdentifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotByIdentifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotByIdentifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotByIdentifierRequest proto.InternalMessageInfo

func (m *QueryBallotByIdentifierRequest) GetBallotIdentifier() string {
	if m != nil {
		return m.BallotIdentifier
	}
	return ""
}

type VoterList struct {
	VoterAddress string   `protobuf:"bytes,1,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	VoteType     VoteType `protobuf:"varint,2,opt,name=vote_type,json=voteType,proto3,enum=zetachain.zetacore.observer.VoteType" json:"vote_type,omitempty"`
}

func (m *VoterList) Reset()         { *m = VoterList{} }
func (m *VoterList) String() string { return proto.CompactTextString(m) }
func (*VoterList) ProtoMessage()    {}
func (*VoterList) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{3}
}
func (m *VoterList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoterList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoterList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoterList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoterList.Merge(m, src)
}
func (m *VoterList) XXX_Size() int {
	return m.Size()
}
func (m *VoterList) XXX_DiscardUnknown() {
	xxx_messageInfo_VoterList.DiscardUnknown(m)
}

var xxx_messageInfo_VoterList proto.InternalMessageInfo

func (m *VoterList) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

func (m *VoterList) GetVoteType() VoteType {
	if m != nil {
		return m.VoteType
	}
	return VoteType_SuccessObservation
}

type QueryBallotByIdentifierResponse struct {
	BallotIdentifier string          `protobuf:"bytes,1,opt,name=BallotIdentifier,proto3" json:"BallotIdentifier,omitempty"`
	Voters           []*VoterList    `protobuf:"bytes,2,rep,name=voters,proto3" json:"voters,omitempty"`
	ObservationType  ObservationType `protobuf:"varint,3,opt,name=observation_type,json=observationType,proto3,enum=zetachain.zetacore.observer.ObservationType" json:"observation_type,omitempty"`
	BallotStatus     BallotStatus    `protobuf:"varint,4,opt,name=ballot_status,json=ballotStatus,proto3,enum=zetachain.zetacore.observer.BallotStatus" json:"ballot_status,omitempty"`
}

func (m *QueryBallotByIdentifierResponse) Reset()         { *m = QueryBallotByIdentifierResponse{} }
func (m *QueryBallotByIdentifierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBallotByIdentifierResponse) ProtoMessage()    {}
func (*QueryBallotByIdentifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{4}
}
func (m *QueryBallotByIdentifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotByIdentifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotByIdentifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotByIdentifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotByIdentifierResponse.Merge(m, src)
}
func (m *QueryBallotByIdentifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotByIdentifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotByIdentifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotByIdentifierResponse proto.InternalMessageInfo

func (m *QueryBallotByIdentifierResponse) GetBallotIdentifier() string {
	if m != nil {
		return m.BallotIdentifier
	}
	return ""
}

func (m *QueryBallotByIdentifierResponse) GetVoters() []*VoterList {
	if m != nil {
		return m.Voters
	}
	return nil
}

func (m *QueryBallotByIdentifierResponse) GetObservationType() ObservationType {
	if m != nil {
		return m.ObservationType
	}
	return ObservationType_EmptyObserverType
}

func (m *QueryBallotByIdentifierResponse) GetBallotStatus() BallotStatus {
	if m != nil {
		return m.BallotStatus
	}
	return BallotStatus_BallotFinalized_SuccessObservation
}

type QueryObserversByChainRequest struct {
	ObservationChain string `protobuf:"bytes,1,opt,name=observation_chain,json=observationChain,proto3" json:"observation_chain,omitempty"`
}

func (m *QueryObserversByChainRequest) Reset()         { *m = QueryObserversByChainRequest{} }
func (m *QueryObserversByChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryObserversByChainRequest) ProtoMessage()    {}
func (*QueryObserversByChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{5}
}
func (m *QueryObserversByChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObserversByChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObserversByChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObserversByChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObserversByChainRequest.Merge(m, src)
}
func (m *QueryObserversByChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryObserversByChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObserversByChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObserversByChainRequest proto.InternalMessageInfo

func (m *QueryObserversByChainRequest) GetObservationChain() string {
	if m != nil {
		return m.ObservationChain
	}
	return ""
}

type QueryObserversByChainResponse struct {
	Observers []string `protobuf:"bytes,1,rep,name=observers,proto3" json:"observers,omitempty"`
}

func (m *QueryObserversByChainResponse) Reset()         { *m = QueryObserversByChainResponse{} }
func (m *QueryObserversByChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryObserversByChainResponse) ProtoMessage()    {}
func (*QueryObserversByChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{6}
}
func (m *QueryObserversByChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObserversByChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObserversByChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObserversByChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObserversByChainResponse.Merge(m, src)
}
func (m *QueryObserversByChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryObserversByChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObserversByChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObserversByChainResponse proto.InternalMessageInfo

func (m *QueryObserversByChainResponse) GetObservers() []string {
	if m != nil {
		return m.Observers
	}
	return nil
}

type QueryAllObserverMappersRequest struct {
}

func (m *QueryAllObserverMappersRequest) Reset()         { *m = QueryAllObserverMappersRequest{} }
func (m *QueryAllObserverMappersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllObserverMappersRequest) ProtoMessage()    {}
func (*QueryAllObserverMappersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{7}
}
func (m *QueryAllObserverMappersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllObserverMappersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllObserverMappersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllObserverMappersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllObserverMappersRequest.Merge(m, src)
}
func (m *QueryAllObserverMappersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllObserverMappersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllObserverMappersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllObserverMappersRequest proto.InternalMessageInfo

type QueryAllObserverMappersResponse struct {
	ObserverMappers []*ObserverMapper `protobuf:"bytes,1,rep,name=observer_mappers,json=observerMappers,proto3" json:"observer_mappers,omitempty"`
}

func (m *QueryAllObserverMappersResponse) Reset()         { *m = QueryAllObserverMappersResponse{} }
func (m *QueryAllObserverMappersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllObserverMappersResponse) ProtoMessage()    {}
func (*QueryAllObserverMappersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{8}
}
func (m *QueryAllObserverMappersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllObserverMappersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllObserverMappersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllObserverMappersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllObserverMappersResponse.Merge(m, src)
}
func (m *QueryAllObserverMappersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllObserverMappersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllObserverMappersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllObserverMappersResponse proto.InternalMessageInfo

func (m *QueryAllObserverMappersResponse) GetObserverMappers() []*ObserverMapper {
	if m != nil {
		return m.ObserverMappers
	}
	return nil
}

type QuerySupportedChains struct {
}

func (m *QuerySupportedChains) Reset()         { *m = QuerySupportedChains{} }
func (m *QuerySupportedChains) String() string { return proto.CompactTextString(m) }
func (*QuerySupportedChains) ProtoMessage()    {}
func (*QuerySupportedChains) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{9}
}
func (m *QuerySupportedChains) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupportedChains) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupportedChains.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupportedChains) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupportedChains.Merge(m, src)
}
func (m *QuerySupportedChains) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupportedChains) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupportedChains.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupportedChains proto.InternalMessageInfo

type QuerySupportedChainsResponse struct {
	Chains []*common.Chain `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
}

func (m *QuerySupportedChainsResponse) Reset()         { *m = QuerySupportedChainsResponse{} }
func (m *QuerySupportedChainsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySupportedChainsResponse) ProtoMessage()    {}
func (*QuerySupportedChainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{10}
}
func (m *QuerySupportedChainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupportedChainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupportedChainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupportedChainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupportedChainsResponse.Merge(m, src)
}
func (m *QuerySupportedChainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupportedChainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupportedChainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupportedChainsResponse proto.InternalMessageInfo

func (m *QuerySupportedChainsResponse) GetChains() []*common.Chain {
	if m != nil {
		return m.Chains
	}
	return nil
}

type QueryGetCoreParamsForChainRequest struct {
	ChainID int64 `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *QueryGetCoreParamsForChainRequest) Reset()         { *m = QueryGetCoreParamsForChainRequest{} }
func (m *QueryGetCoreParamsForChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoreParamsForChainRequest) ProtoMessage()    {}
func (*QueryGetCoreParamsForChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{11}
}
func (m *QueryGetCoreParamsForChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoreParamsForChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoreParamsForChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoreParamsForChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoreParamsForChainRequest.Merge(m, src)
}
func (m *QueryGetCoreParamsForChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoreParamsForChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoreParamsForChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoreParamsForChainRequest proto.InternalMessageInfo

func (m *QueryGetCoreParamsForChainRequest) GetChainID() int64 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

type QueryGetCoreParamsForChainResponse struct {
	CoreParams *CoreParams `protobuf:"bytes,1,opt,name=core_params,json=coreParams,proto3" json:"core_params,omitempty"`
}

func (m *QueryGetCoreParamsForChainResponse) Reset()         { *m = QueryGetCoreParamsForChainResponse{} }
func (m *QueryGetCoreParamsForChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoreParamsForChainResponse) ProtoMessage()    {}
func (*QueryGetCoreParamsForChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{12}
}
func (m *QueryGetCoreParamsForChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoreParamsForChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoreParamsForChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoreParamsForChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoreParamsForChainResponse.Merge(m, src)
}
func (m *QueryGetCoreParamsForChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoreParamsForChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoreParamsForChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoreParamsForChainResponse proto.InternalMessageInfo

func (m *QueryGetCoreParamsForChainResponse) GetCoreParams() *CoreParams {
	if m != nil {
		return m.CoreParams
	}
	return nil
}

type QueryGetCoreParamsRequest struct {
}

func (m *QueryGetCoreParamsRequest) Reset()         { *m = QueryGetCoreParamsRequest{} }
func (m *QueryGetCoreParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoreParamsRequest) ProtoMessage()    {}
func (*QueryGetCoreParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{13}
}
func (m *QueryGetCoreParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoreParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoreParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoreParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoreParamsRequest.Merge(m, src)
}
func (m *QueryGetCoreParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoreParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoreParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoreParamsRequest proto.InternalMessageInfo

type QueryGetCoreParamsResponse struct {
	CoreParams *CoreParamsList `protobuf:"bytes,1,opt,name=core_params,json=coreParams,proto3" json:"core_params,omitempty"`
}

func (m *QueryGetCoreParamsResponse) Reset()         { *m = QueryGetCoreParamsResponse{} }
func (m *QueryGetCoreParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoreParamsResponse) ProtoMessage()    {}
func (*QueryGetCoreParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb801e455adaee4, []int{14}
}
func (m *QueryGetCoreParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoreParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoreParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoreParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoreParamsResponse.Merge(m, src)
}
func (m *QueryGetCoreParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoreParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoreParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoreParamsResponse proto.InternalMessageInfo

func (m *QueryGetCoreParamsResponse) GetCoreParams() *CoreParamsList {
	if m != nil {
		return m.CoreParams
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "zetachain.zetacore.observer.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "zetachain.zetacore.observer.QueryParamsResponse")
	proto.RegisterType((*QueryBallotByIdentifierRequest)(nil), "zetachain.zetacore.observer.QueryBallotByIdentifierRequest")
	proto.RegisterType((*VoterList)(nil), "zetachain.zetacore.observer.VoterList")
	proto.RegisterType((*QueryBallotByIdentifierResponse)(nil), "zetachain.zetacore.observer.QueryBallotByIdentifierResponse")
	proto.RegisterType((*QueryObserversByChainRequest)(nil), "zetachain.zetacore.observer.QueryObserversByChainRequest")
	proto.RegisterType((*QueryObserversByChainResponse)(nil), "zetachain.zetacore.observer.QueryObserversByChainResponse")
	proto.RegisterType((*QueryAllObserverMappersRequest)(nil), "zetachain.zetacore.observer.QueryAllObserverMappersRequest")
	proto.RegisterType((*QueryAllObserverMappersResponse)(nil), "zetachain.zetacore.observer.QueryAllObserverMappersResponse")
	proto.RegisterType((*QuerySupportedChains)(nil), "zetachain.zetacore.observer.QuerySupportedChains")
	proto.RegisterType((*QuerySupportedChainsResponse)(nil), "zetachain.zetacore.observer.QuerySupportedChainsResponse")
	proto.RegisterType((*QueryGetCoreParamsForChainRequest)(nil), "zetachain.zetacore.observer.QueryGetCoreParamsForChainRequest")
	proto.RegisterType((*QueryGetCoreParamsForChainResponse)(nil), "zetachain.zetacore.observer.QueryGetCoreParamsForChainResponse")
	proto.RegisterType((*QueryGetCoreParamsRequest)(nil), "zetachain.zetacore.observer.QueryGetCoreParamsRequest")
	proto.RegisterType((*QueryGetCoreParamsResponse)(nil), "zetachain.zetacore.observer.QueryGetCoreParamsResponse")
}

func init() { proto.RegisterFile("observer/query.proto", fileDescriptor_dcb801e455adaee4) }

var fileDescriptor_dcb801e455adaee4 = []byte{
	// 938 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x51, 0x6f, 0xdb, 0x54,
	0x14, 0xae, 0xdb, 0x11, 0xc8, 0xe9, 0xca, 0xca, 0x5d, 0x07, 0xc1, 0xed, 0xb2, 0x72, 0xcb, 0x46,
	0x47, 0xb7, 0x98, 0x05, 0x01, 0x1a, 0xa3, 0x9b, 0x9a, 0x52, 0xa0, 0xda, 0xc6, 0xc0, 0x43, 0x03,
	0xf1, 0x62, 0x39, 0xed, 0x5d, 0x66, 0xe4, 0xf8, 0x7a, 0xf6, 0x4d, 0x45, 0x98, 0xfa, 0xc2, 0x2f,
	0x98, 0xc4, 0xef, 0xe0, 0x15, 0xde, 0x79, 0xda, 0x13, 0xaa, 0x84, 0x84, 0x90, 0x90, 0x10, 0x6a,
	0xe1, 0x7f, 0x4c, 0x3e, 0xf7, 0x5e, 0x27, 0x71, 0x1c, 0x27, 0xed, 0x53, 0xae, 0xcf, 0xbd, 0xdf,
	0x39, 0xdf, 0x77, 0x8e, 0xef, 0x17, 0xc3, 0x02, 0x6f, 0xc6, 0x2c, 0xda, 0x63, 0x91, 0xf5, 0xb8,
	0xc3, 0xa2, 0x6e, 0x2d, 0x8c, 0xb8, 0xe0, 0x64, 0xf1, 0x07, 0x26, 0xdc, 0x9d, 0x47, 0xae, 0x17,
	0xd4, 0x70, 0xc5, 0x23, 0x56, 0xd3, 0x07, 0xcd, 0xa5, 0x16, 0xe7, 0x2d, 0x9f, 0x59, 0x6e, 0xe8,
	0x59, 0x6e, 0x10, 0x70, 0xe1, 0x0a, 0x8f, 0x07, 0xb1, 0x84, 0x9a, 0x0b, 0x2d, 0xde, 0xe2, 0xb8,
	0xb4, 0x92, 0x95, 0x8a, 0x9e, 0x4b, 0xcb, 0x84, 0x6e, 0xe4, 0xb6, 0xf5, 0xe1, 0xd7, 0xd2, 0xb0,
	0x5e, 0x0c, 0x9d, 0x6f, 0xba, 0xbe, 0xcf, 0x85, 0x0a, 0x9f, 0xdd, 0xe1, 0xed, 0x36, 0x0f, 0x2c,
	0xf9, 0x23, 0x83, 0x74, 0x01, 0xc8, 0x97, 0x09, 0xf7, 0x2f, 0x30, 0xb3, 0xcd, 0x1e, 0x77, 0x58,
	0x2c, 0xe8, 0x37, 0x70, 0x76, 0x20, 0x1a, 0x87, 0x3c, 0x88, 0x19, 0xd9, 0x80, 0x92, 0x64, 0x50,
	0x31, 0x96, 0x8d, 0xd5, 0xd9, 0xfa, 0x4a, 0xad, 0x40, 0x6a, 0x4d, 0x82, 0x1b, 0xa7, 0x9e, 0xfd,
	0x73, 0x61, 0xca, 0x56, 0x40, 0x7a, 0x17, 0xaa, 0x98, 0xb9, 0x81, 0xcc, 0x1a, 0xdd, 0xed, 0x5d,
	0x16, 0x08, 0xef, 0xa1, 0xc7, 0x22, 0x55, 0x9b, 0xac, 0xc1, 0x2b, 0x92, 0xb6, 0xe3, 0xa5, 0x7b,
	0x58, 0xaf, 0x6c, 0xcf, 0xcb, 0x8d, 0x1e, 0x86, 0x0a, 0x28, 0x3f, 0xe0, 0x82, 0x45, 0x77, 0xbc,
	0x58, 0x90, 0x15, 0x98, 0xdb, 0x4b, 0x1e, 0x1c, 0x77, 0x77, 0x37, 0x62, 0x71, 0xac, 0x50, 0xa7,
	0x31, 0xb8, 0x21, 0x63, 0xa4, 0x01, 0xe5, 0xe4, 0xd9, 0x11, 0xdd, 0x90, 0x55, 0xa6, 0x97, 0x8d,
	0xd5, 0x97, 0xeb, 0x17, 0x0b, 0x65, 0x24, 0xf9, 0xbf, 0xea, 0x86, 0xcc, 0x7e, 0x69, 0x4f, 0xad,
	0xe8, 0x2f, 0xd3, 0x70, 0x61, 0xa4, 0x0a, 0xd5, 0xab, 0xb7, 0x61, 0xbe, 0x91, 0x61, 0xab, 0x55,
	0x64, 0xe3, 0xe4, 0x26, 0x94, 0x90, 0x63, 0x5c, 0x99, 0x5e, 0x9e, 0x59, 0x9d, 0xad, 0x5f, 0x1a,
	0x4b, 0x08, 0x05, 0xdb, 0x0a, 0x45, 0xbe, 0x86, 0x79, 0xb9, 0x8b, 0x2f, 0x93, 0x94, 0x36, 0x83,
	0xd2, 0xae, 0x14, 0x66, 0xba, 0xd7, 0x03, 0xa1, 0xc2, 0x33, 0x7c, 0x30, 0x40, 0x3e, 0x87, 0x39,
	0x35, 0x8b, 0x58, 0xb8, 0xa2, 0x13, 0x57, 0x4e, 0x61, 0xd6, 0xcb, 0x85, 0x59, 0xa5, 0xbc, 0xfb,
	0x08, 0xb0, 0x4f, 0x37, 0xfb, 0x9e, 0xe8, 0x6d, 0x58, 0xc2, 0xbe, 0xdd, 0x53, 0x67, 0xe3, 0x46,
	0x77, 0x33, 0xc9, 0xd2, 0x37, 0xfb, 0x7e, 0x21, 0x58, 0x41, 0x77, 0xad, 0x6f, 0x03, 0x31, 0x74,
	0x1d, 0xce, 0x8f, 0x48, 0xa6, 0x46, 0xb0, 0x04, 0x65, 0x4d, 0x2a, 0x79, 0x17, 0x66, 0x56, 0xcb,
	0x76, 0x2f, 0x40, 0x97, 0xd5, 0x9b, 0xb8, 0xe1, 0xfb, 0x3a, 0xc3, 0x5d, 0x37, 0x0c, 0x59, 0x94,
	0xde, 0x82, 0xae, 0x9a, 0x72, 0xde, 0x09, 0x55, 0xe2, 0x81, 0xee, 0x3c, 0x8b, 0x9c, 0xb6, 0xdc,
	0xc3, 0x4a, 0xb3, 0xf5, 0xb5, 0x09, 0x3a, 0xaf, 0xf3, 0xe9, 0xc6, 0xa7, 0xf9, 0xe9, 0xab, 0xb0,
	0x80, 0xa5, 0xef, 0x77, 0xc2, 0x90, 0x47, 0x82, 0xed, 0xa2, 0xb2, 0x98, 0x6e, 0xa9, 0x06, 0x66,
	0xe2, 0x29, 0x9f, 0x8b, 0x50, 0xc2, 0x92, 0x9a, 0xc5, 0x5c, 0x4d, 0xdd, 0x76, 0xd9, 0x19, 0xb5,
	0x49, 0xd7, 0xe1, 0x0d, 0x4c, 0xf3, 0x29, 0x13, 0x9b, 0x3c, 0x62, 0xf2, 0xa6, 0x7e, 0xc2, 0xa3,
	0x81, 0x61, 0x54, 0xe0, 0x45, 0x3c, 0xbe, 0xfd, 0x31, 0x8e, 0x60, 0xc6, 0xd6, 0x8f, 0x34, 0x00,
	0x5a, 0x04, 0x57, 0x5c, 0x3e, 0x83, 0xd9, 0x44, 0xb4, 0x33, 0x60, 0x19, 0x6f, 0x15, 0xb6, 0xa5,
	0x97, 0xcd, 0x86, 0x9d, 0x74, 0x4d, 0x17, 0xe1, 0xf5, 0xe1, 0x7a, 0x7a, 0x4a, 0xdf, 0x81, 0x99,
	0xb7, 0xa9, 0x48, 0xdc, 0xc9, 0x23, 0xb1, 0x36, 0x21, 0x09, 0xbc, 0x64, 0x7d, 0x44, 0xea, 0x7f,
	0x03, 0xbc, 0x80, 0xc5, 0xc8, 0x53, 0x03, 0x4a, 0x32, 0x48, 0xac, 0xc2, 0x6c, 0xc3, 0xee, 0x6a,
	0xbe, 0x33, 0x39, 0x40, 0xaa, 0xa0, 0x2b, 0x3f, 0xfe, 0xf1, 0xdf, 0x4f, 0xd3, 0xe7, 0xc9, 0xa2,
	0x95, 0x9c, 0xbf, 0x8a, 0x50, 0x2b, 0xf3, 0xaf, 0x40, 0xfe, 0x34, 0x80, 0x0c, 0x1b, 0x12, 0xb9,
	0x31, 0xbe, 0xda, 0x48, 0x33, 0x36, 0x3f, 0x3a, 0x19, 0x58, 0xd1, 0xde, 0x42, 0xda, 0xb7, 0xc8,
	0x7a, 0x2e, 0x6d, 0xe5, 0x2c, 0xcd, 0x6e, 0x9f, 0xd1, 0x5b, 0x4f, 0x86, 0xbc, 0x7f, 0x9f, 0xfc,
	0x6e, 0xc0, 0x7c, 0xf6, 0x92, 0x93, 0xeb, 0xe3, 0x99, 0x8d, 0x70, 0x19, 0xf3, 0xc3, 0x93, 0x40,
	0x95, 0xa4, 0x4d, 0x94, 0xb4, 0x4e, 0x6e, 0xe4, 0x4a, 0x4a, 0xdd, 0x25, 0x51, 0x25, 0xf7, 0x9e,
	0x0c, 0x19, 0xda, 0x3e, 0xf9, 0xcd, 0x00, 0x32, 0x6c, 0x2a, 0x93, 0x4c, 0x6a, 0xa4, 0x59, 0x4d,
	0x32, 0xa9, 0xd1, 0x3e, 0x46, 0xaf, 0xa1, 0xac, 0x35, 0x72, 0x39, 0x57, 0x96, 0xeb, 0xfb, 0x4e,
	0xd6, 0xe6, 0xc8, 0xcf, 0x06, 0x9c, 0xc9, 0xd8, 0x10, 0xb9, 0x36, 0x9e, 0x44, 0x06, 0x62, 0x5e,
	0x3f, 0x36, 0x24, 0x25, 0x7d, 0x05, 0x49, 0x5f, 0x22, 0x6f, 0xe6, 0x92, 0x8e, 0x33, 0xdc, 0xfe,
	0x37, 0xe0, 0x5c, 0xae, 0x61, 0x91, 0x9b, 0xe3, 0x29, 0x14, 0x19, 0xa5, 0x79, 0xeb, 0xc4, 0x78,
	0x25, 0xe4, 0x36, 0x0a, 0xd9, 0x22, 0x9b, 0xfd, 0x42, 0x74, 0xa6, 0x9e, 0xa2, 0x16, 0x13, 0xce,
	0x8e, 0xef, 0xb1, 0x40, 0x28, 0x3b, 0x73, 0x1e, 0xf2, 0x48, 0xbf, 0x66, 0xca, 0x9b, 0xf7, 0xc9,
	0xaf, 0x06, 0xcc, 0x0d, 0x94, 0x23, 0xef, 0x1f, 0x93, 0x9f, 0xd6, 0xf5, 0xc1, 0xb1, 0x71, 0x4a,
	0xcf, 0x7b, 0xa8, 0xc7, 0x22, 0x57, 0x27, 0xd0, 0xd3, 0x33, 0xe7, 0xc6, 0xf6, 0xb3, 0xc3, 0xaa,
	0x71, 0x70, 0x58, 0x35, 0xfe, 0x3d, 0xac, 0x1a, 0x4f, 0x8f, 0xaa, 0x53, 0x07, 0x47, 0xd5, 0xa9,
	0xbf, 0x8e, 0xaa, 0x53, 0xdf, 0x5a, 0x2d, 0x4f, 0x3c, 0xea, 0x34, 0x93, 0x3f, 0xb3, 0xdc, 0x94,
	0xdf, 0xf7, 0x92, 0x26, 0x1f, 0x3f, 0x71, 0xb3, 0x84, 0x5f, 0xb7, 0xef, 0x3e, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0x97, 0xed, 0xb4, 0x1b, 0xa2, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of VoterByIdentifier items.
	BallotByIdentifier(ctx context.Context, in *QueryBallotByIdentifierRequest, opts ...grpc.CallOption) (*QueryBallotByIdentifierResponse, error)
	// Queries a list of ObserversByChainAndType items.
	ObserversByChain(ctx context.Context, in *QueryObserversByChainRequest, opts ...grpc.CallOption) (*QueryObserversByChainResponse, error)
	AllObserverMappers(ctx context.Context, in *QueryAllObserverMappersRequest, opts ...grpc.CallOption) (*QueryAllObserverMappersResponse, error)
	SupportedChains(ctx context.Context, in *QuerySupportedChains, opts ...grpc.CallOption) (*QuerySupportedChainsResponse, error)
	// Queries a list of GetClientParamsForChain items.
	GetCoreParamsForChain(ctx context.Context, in *QueryGetCoreParamsForChainRequest, opts ...grpc.CallOption) (*QueryGetCoreParamsForChainResponse, error)
	// Queries a list of GetCoreParams items.
	GetCoreParams(ctx context.Context, in *QueryGetCoreParamsRequest, opts ...grpc.CallOption) (*QueryGetCoreParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BallotByIdentifier(ctx context.Context, in *QueryBallotByIdentifierRequest, opts ...grpc.CallOption) (*QueryBallotByIdentifierResponse, error) {
	out := new(QueryBallotByIdentifierResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/BallotByIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ObserversByChain(ctx context.Context, in *QueryObserversByChainRequest, opts ...grpc.CallOption) (*QueryObserversByChainResponse, error) {
	out := new(QueryObserversByChainResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/ObserversByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllObserverMappers(ctx context.Context, in *QueryAllObserverMappersRequest, opts ...grpc.CallOption) (*QueryAllObserverMappersResponse, error) {
	out := new(QueryAllObserverMappersResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/AllObserverMappers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupportedChains(ctx context.Context, in *QuerySupportedChains, opts ...grpc.CallOption) (*QuerySupportedChainsResponse, error) {
	out := new(QuerySupportedChainsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/SupportedChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCoreParamsForChain(ctx context.Context, in *QueryGetCoreParamsForChainRequest, opts ...grpc.CallOption) (*QueryGetCoreParamsForChainResponse, error) {
	out := new(QueryGetCoreParamsForChainResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/GetCoreParamsForChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCoreParams(ctx context.Context, in *QueryGetCoreParamsRequest, opts ...grpc.CallOption) (*QueryGetCoreParamsResponse, error) {
	out := new(QueryGetCoreParamsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/GetCoreParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of VoterByIdentifier items.
	BallotByIdentifier(context.Context, *QueryBallotByIdentifierRequest) (*QueryBallotByIdentifierResponse, error)
	// Queries a list of ObserversByChainAndType items.
	ObserversByChain(context.Context, *QueryObserversByChainRequest) (*QueryObserversByChainResponse, error)
	AllObserverMappers(context.Context, *QueryAllObserverMappersRequest) (*QueryAllObserverMappersResponse, error)
	SupportedChains(context.Context, *QuerySupportedChains) (*QuerySupportedChainsResponse, error)
	// Queries a list of GetClientParamsForChain items.
	GetCoreParamsForChain(context.Context, *QueryGetCoreParamsForChainRequest) (*QueryGetCoreParamsForChainResponse, error)
	// Queries a list of GetCoreParams items.
	GetCoreParams(context.Context, *QueryGetCoreParamsRequest) (*QueryGetCoreParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) BallotByIdentifier(ctx context.Context, req *QueryBallotByIdentifierRequest) (*QueryBallotByIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BallotByIdentifier not implemented")
}
func (*UnimplementedQueryServer) ObserversByChain(ctx context.Context, req *QueryObserversByChainRequest) (*QueryObserversByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObserversByChain not implemented")
}
func (*UnimplementedQueryServer) AllObserverMappers(ctx context.Context, req *QueryAllObserverMappersRequest) (*QueryAllObserverMappersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllObserverMappers not implemented")
}
func (*UnimplementedQueryServer) SupportedChains(ctx context.Context, req *QuerySupportedChains) (*QuerySupportedChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedChains not implemented")
}
func (*UnimplementedQueryServer) GetCoreParamsForChain(ctx context.Context, req *QueryGetCoreParamsForChainRequest) (*QueryGetCoreParamsForChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoreParamsForChain not implemented")
}
func (*UnimplementedQueryServer) GetCoreParams(ctx context.Context, req *QueryGetCoreParamsRequest) (*QueryGetCoreParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoreParams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BallotByIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBallotByIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BallotByIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/BallotByIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BallotByIdentifier(ctx, req.(*QueryBallotByIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ObserversByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryObserversByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ObserversByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/ObserversByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ObserversByChain(ctx, req.(*QueryObserversByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllObserverMappers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllObserverMappersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllObserverMappers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/AllObserverMappers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllObserverMappers(ctx, req.(*QueryAllObserverMappersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupportedChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySupportedChains)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupportedChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/SupportedChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupportedChains(ctx, req.(*QuerySupportedChains))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCoreParamsForChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCoreParamsForChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCoreParamsForChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/GetCoreParamsForChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCoreParamsForChain(ctx, req.(*QueryGetCoreParamsForChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCoreParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCoreParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCoreParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/GetCoreParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCoreParams(ctx, req.(*QueryGetCoreParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.observer.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "BallotByIdentifier",
			Handler:    _Query_BallotByIdentifier_Handler,
		},
		{
			MethodName: "ObserversByChain",
			Handler:    _Query_ObserversByChain_Handler,
		},
		{
			MethodName: "AllObserverMappers",
			Handler:    _Query_AllObserverMappers_Handler,
		},
		{
			MethodName: "SupportedChains",
			Handler:    _Query_SupportedChains_Handler,
		},
		{
			MethodName: "GetCoreParamsForChain",
			Handler:    _Query_GetCoreParamsForChain_Handler,
		},
		{
			MethodName: "GetCoreParams",
			Handler:    _Query_GetCoreParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "observer/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBallotByIdentifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotByIdentifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotByIdentifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BallotIdentifier) > 0 {
		i -= len(m.BallotIdentifier)
		copy(dAtA[i:], m.BallotIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BallotIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoterList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoterList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoterList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VoteType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBallotByIdentifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotByIdentifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotByIdentifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BallotStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BallotStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.ObservationType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ObservationType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voters) > 0 {
		for iNdEx := len(m.Voters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Voters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BallotIdentifier) > 0 {
		i -= len(m.BallotIdentifier)
		copy(dAtA[i:], m.BallotIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BallotIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryObserversByChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObserversByChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObserversByChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObservationChain) > 0 {
		i -= len(m.ObservationChain)
		copy(dAtA[i:], m.ObservationChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ObservationChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryObserversByChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObserversByChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObserversByChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Observers) > 0 {
		for iNdEx := len(m.Observers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Observers[iNdEx])
			copy(dAtA[i:], m.Observers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Observers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllObserverMappersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllObserverMappersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllObserverMappersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllObserverMappersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllObserverMappersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllObserverMappersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObserverMappers) > 0 {
		for iNdEx := len(m.ObserverMappers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObserverMappers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySupportedChains) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupportedChains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupportedChains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySupportedChainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupportedChainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupportedChainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoreParamsForChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoreParamsForChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoreParamsForChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoreParamsForChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoreParamsForChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoreParamsForChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoreParams != nil {
		{
			size, err := m.CoreParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoreParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoreParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoreParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCoreParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoreParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoreParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoreParams != nil {
		{
			size, err := m.CoreParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBallotByIdentifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BallotIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *VoterList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.VoteType != 0 {
		n += 1 + sovQuery(uint64(m.VoteType))
	}
	return n
}

func (m *QueryBallotByIdentifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BallotIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Voters) > 0 {
		for _, e := range m.Voters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.ObservationType != 0 {
		n += 1 + sovQuery(uint64(m.ObservationType))
	}
	if m.BallotStatus != 0 {
		n += 1 + sovQuery(uint64(m.BallotStatus))
	}
	return n
}

func (m *QueryObserversByChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObservationChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryObserversByChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Observers) > 0 {
		for _, s := range m.Observers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllObserverMappersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllObserverMappersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ObserverMappers) > 0 {
		for _, e := range m.ObserverMappers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySupportedChains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySupportedChainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for _, e := range m.Chains {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetCoreParamsForChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainID != 0 {
		n += 1 + sovQuery(uint64(m.ChainID))
	}
	return n
}

func (m *QueryGetCoreParamsForChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoreParams != nil {
		l = m.CoreParams.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCoreParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCoreParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoreParams != nil {
		l = m.CoreParams.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotByIdentifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotByIdentifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotByIdentifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoterList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoterList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoterList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteType", wireType)
			}
			m.VoteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteType |= VoteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotByIdentifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotByIdentifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotByIdentifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voters = append(m.Voters, &VoterList{})
			if err := m.Voters[len(m.Voters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservationType", wireType)
			}
			m.ObservationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservationType |= ObservationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotStatus", wireType)
			}
			m.BallotStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BallotStatus |= BallotStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObserversByChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObserversByChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObserversByChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservationChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservationChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObserversByChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObserversByChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObserversByChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Observers = append(m.Observers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllObserverMappersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllObserverMappersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllObserverMappersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllObserverMappersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllObserverMappersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllObserverMappersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserverMappers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObserverMappers = append(m.ObserverMappers, &ObserverMapper{})
			if err := m.ObserverMappers[len(m.ObserverMappers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupportedChains) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupportedChains: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupportedChains: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupportedChainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupportedChainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupportedChainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, &common.Chain{})
			if err := m.Chains[len(m.Chains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoreParamsForChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoreParamsForChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoreParamsForChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoreParamsForChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoreParamsForChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoreParamsForChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoreParams == nil {
				m.CoreParams = &CoreParams{}
			}
			if err := m.CoreParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoreParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoreParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoreParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoreParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoreParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoreParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoreParams == nil {
				m.CoreParams = &CoreParamsList{}
			}
			if err := m.CoreParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
