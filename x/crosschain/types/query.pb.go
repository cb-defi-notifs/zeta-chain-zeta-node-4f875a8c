// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosschain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetOutTxTrackerRequest struct {
	ChainID int64  `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetOutTxTrackerRequest) Reset()         { *m = QueryGetOutTxTrackerRequest{} }
func (m *QueryGetOutTxTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutTxTrackerRequest) ProtoMessage()    {}
func (*QueryGetOutTxTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{2}
}
func (m *QueryGetOutTxTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutTxTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutTxTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutTxTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutTxTrackerRequest.Merge(m, src)
}
func (m *QueryGetOutTxTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutTxTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutTxTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutTxTrackerRequest proto.InternalMessageInfo

func (m *QueryGetOutTxTrackerRequest) GetChainID() int64 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *QueryGetOutTxTrackerRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryGetOutTxTrackerResponse struct {
	OutTxTracker OutTxTracker `protobuf:"bytes,1,opt,name=outTxTracker,proto3" json:"outTxTracker"`
}

func (m *QueryGetOutTxTrackerResponse) Reset()         { *m = QueryGetOutTxTrackerResponse{} }
func (m *QueryGetOutTxTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutTxTrackerResponse) ProtoMessage()    {}
func (*QueryGetOutTxTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{3}
}
func (m *QueryGetOutTxTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutTxTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutTxTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutTxTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutTxTrackerResponse.Merge(m, src)
}
func (m *QueryGetOutTxTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutTxTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutTxTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutTxTrackerResponse proto.InternalMessageInfo

func (m *QueryGetOutTxTrackerResponse) GetOutTxTracker() OutTxTracker {
	if m != nil {
		return m.OutTxTracker
	}
	return OutTxTracker{}
}

type QueryAllOutTxTrackerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutTxTrackerRequest) Reset()         { *m = QueryAllOutTxTrackerRequest{} }
func (m *QueryAllOutTxTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutTxTrackerRequest) ProtoMessage()    {}
func (*QueryAllOutTxTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{4}
}
func (m *QueryAllOutTxTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutTxTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutTxTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutTxTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutTxTrackerRequest.Merge(m, src)
}
func (m *QueryAllOutTxTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutTxTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutTxTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutTxTrackerRequest proto.InternalMessageInfo

func (m *QueryAllOutTxTrackerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOutTxTrackerResponse struct {
	OutTxTracker []OutTxTracker      `protobuf:"bytes,1,rep,name=outTxTracker,proto3" json:"outTxTracker"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutTxTrackerResponse) Reset()         { *m = QueryAllOutTxTrackerResponse{} }
func (m *QueryAllOutTxTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutTxTrackerResponse) ProtoMessage()    {}
func (*QueryAllOutTxTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{5}
}
func (m *QueryAllOutTxTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutTxTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutTxTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutTxTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutTxTrackerResponse.Merge(m, src)
}
func (m *QueryAllOutTxTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutTxTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutTxTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutTxTrackerResponse proto.InternalMessageInfo

func (m *QueryAllOutTxTrackerResponse) GetOutTxTracker() []OutTxTracker {
	if m != nil {
		return m.OutTxTracker
	}
	return nil
}

func (m *QueryAllOutTxTrackerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOutTxTrackerByChainRequest struct {
	Chain      int64              `protobuf:"varint,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutTxTrackerByChainRequest) Reset()         { *m = QueryAllOutTxTrackerByChainRequest{} }
func (m *QueryAllOutTxTrackerByChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutTxTrackerByChainRequest) ProtoMessage()    {}
func (*QueryAllOutTxTrackerByChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{6}
}
func (m *QueryAllOutTxTrackerByChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutTxTrackerByChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutTxTrackerByChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutTxTrackerByChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutTxTrackerByChainRequest.Merge(m, src)
}
func (m *QueryAllOutTxTrackerByChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutTxTrackerByChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutTxTrackerByChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutTxTrackerByChainRequest proto.InternalMessageInfo

func (m *QueryAllOutTxTrackerByChainRequest) GetChain() int64 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *QueryAllOutTxTrackerByChainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOutTxTrackerByChainResponse struct {
	OutTxTracker []OutTxTracker      `protobuf:"bytes,1,rep,name=outTxTracker,proto3" json:"outTxTracker"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutTxTrackerByChainResponse) Reset()         { *m = QueryAllOutTxTrackerByChainResponse{} }
func (m *QueryAllOutTxTrackerByChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutTxTrackerByChainResponse) ProtoMessage()    {}
func (*QueryAllOutTxTrackerByChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{7}
}
func (m *QueryAllOutTxTrackerByChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutTxTrackerByChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutTxTrackerByChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutTxTrackerByChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutTxTrackerByChainResponse.Merge(m, src)
}
func (m *QueryAllOutTxTrackerByChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutTxTrackerByChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutTxTrackerByChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutTxTrackerByChainResponse proto.InternalMessageInfo

func (m *QueryAllOutTxTrackerByChainResponse) GetOutTxTracker() []OutTxTracker {
	if m != nil {
		return m.OutTxTracker
	}
	return nil
}

func (m *QueryAllOutTxTrackerByChainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInTxHashToCctxRequest struct {
	InTxHash string `protobuf:"bytes,1,opt,name=inTxHash,proto3" json:"inTxHash,omitempty"`
}

func (m *QueryGetInTxHashToCctxRequest) Reset()         { *m = QueryGetInTxHashToCctxRequest{} }
func (m *QueryGetInTxHashToCctxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInTxHashToCctxRequest) ProtoMessage()    {}
func (*QueryGetInTxHashToCctxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{8}
}
func (m *QueryGetInTxHashToCctxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInTxHashToCctxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInTxHashToCctxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInTxHashToCctxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInTxHashToCctxRequest.Merge(m, src)
}
func (m *QueryGetInTxHashToCctxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInTxHashToCctxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInTxHashToCctxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInTxHashToCctxRequest proto.InternalMessageInfo

func (m *QueryGetInTxHashToCctxRequest) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

type QueryGetInTxHashToCctxResponse struct {
	InTxHashToCctx InTxHashToCctx `protobuf:"bytes,1,opt,name=inTxHashToCctx,proto3" json:"inTxHashToCctx"`
}

func (m *QueryGetInTxHashToCctxResponse) Reset()         { *m = QueryGetInTxHashToCctxResponse{} }
func (m *QueryGetInTxHashToCctxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInTxHashToCctxResponse) ProtoMessage()    {}
func (*QueryGetInTxHashToCctxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{9}
}
func (m *QueryGetInTxHashToCctxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInTxHashToCctxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInTxHashToCctxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInTxHashToCctxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInTxHashToCctxResponse.Merge(m, src)
}
func (m *QueryGetInTxHashToCctxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInTxHashToCctxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInTxHashToCctxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInTxHashToCctxResponse proto.InternalMessageInfo

func (m *QueryGetInTxHashToCctxResponse) GetInTxHashToCctx() InTxHashToCctx {
	if m != nil {
		return m.InTxHashToCctx
	}
	return InTxHashToCctx{}
}

type QueryAllInTxHashToCctxRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInTxHashToCctxRequest) Reset()         { *m = QueryAllInTxHashToCctxRequest{} }
func (m *QueryAllInTxHashToCctxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInTxHashToCctxRequest) ProtoMessage()    {}
func (*QueryAllInTxHashToCctxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{10}
}
func (m *QueryAllInTxHashToCctxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInTxHashToCctxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInTxHashToCctxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInTxHashToCctxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInTxHashToCctxRequest.Merge(m, src)
}
func (m *QueryAllInTxHashToCctxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInTxHashToCctxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInTxHashToCctxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInTxHashToCctxRequest proto.InternalMessageInfo

func (m *QueryAllInTxHashToCctxRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInTxHashToCctxResponse struct {
	InTxHashToCctx []InTxHashToCctx    `protobuf:"bytes,1,rep,name=inTxHashToCctx,proto3" json:"inTxHashToCctx"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInTxHashToCctxResponse) Reset()         { *m = QueryAllInTxHashToCctxResponse{} }
func (m *QueryAllInTxHashToCctxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInTxHashToCctxResponse) ProtoMessage()    {}
func (*QueryAllInTxHashToCctxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{11}
}
func (m *QueryAllInTxHashToCctxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInTxHashToCctxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInTxHashToCctxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInTxHashToCctxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInTxHashToCctxResponse.Merge(m, src)
}
func (m *QueryAllInTxHashToCctxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInTxHashToCctxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInTxHashToCctxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInTxHashToCctxResponse proto.InternalMessageInfo

func (m *QueryAllInTxHashToCctxResponse) GetInTxHashToCctx() []InTxHashToCctx {
	if m != nil {
		return m.InTxHashToCctx
	}
	return nil
}

func (m *QueryAllInTxHashToCctxResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPermissionFlagsRequest struct {
}

func (m *QueryGetPermissionFlagsRequest) Reset()         { *m = QueryGetPermissionFlagsRequest{} }
func (m *QueryGetPermissionFlagsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPermissionFlagsRequest) ProtoMessage()    {}
func (*QueryGetPermissionFlagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{12}
}
func (m *QueryGetPermissionFlagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPermissionFlagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPermissionFlagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPermissionFlagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPermissionFlagsRequest.Merge(m, src)
}
func (m *QueryGetPermissionFlagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPermissionFlagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPermissionFlagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPermissionFlagsRequest proto.InternalMessageInfo

type QueryGetPermissionFlagsResponse struct {
	PermissionFlags PermissionFlags `protobuf:"bytes,1,opt,name=PermissionFlags,proto3" json:"PermissionFlags"`
}

func (m *QueryGetPermissionFlagsResponse) Reset()         { *m = QueryGetPermissionFlagsResponse{} }
func (m *QueryGetPermissionFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPermissionFlagsResponse) ProtoMessage()    {}
func (*QueryGetPermissionFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{13}
}
func (m *QueryGetPermissionFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPermissionFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPermissionFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPermissionFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPermissionFlagsResponse.Merge(m, src)
}
func (m *QueryGetPermissionFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPermissionFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPermissionFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPermissionFlagsResponse proto.InternalMessageInfo

func (m *QueryGetPermissionFlagsResponse) GetPermissionFlags() PermissionFlags {
	if m != nil {
		return m.PermissionFlags
	}
	return PermissionFlags{}
}

type QueryGetValidatorConsAddressRequest struct {
	ValidatorOperatorAddress string `protobuf:"bytes,1,opt,name=validatorOperatorAddress,proto3" json:"validatorOperatorAddress,omitempty"`
}

func (m *QueryGetValidatorConsAddressRequest) Reset()         { *m = QueryGetValidatorConsAddressRequest{} }
func (m *QueryGetValidatorConsAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorConsAddressRequest) ProtoMessage()    {}
func (*QueryGetValidatorConsAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{14}
}
func (m *QueryGetValidatorConsAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorConsAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorConsAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorConsAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorConsAddressRequest.Merge(m, src)
}
func (m *QueryGetValidatorConsAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorConsAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorConsAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorConsAddressRequest proto.InternalMessageInfo

func (m *QueryGetValidatorConsAddressRequest) GetValidatorOperatorAddress() string {
	if m != nil {
		return m.ValidatorOperatorAddress
	}
	return ""
}

type QueryGetValidatorConsAddressResponse struct {
	ValidatorConsAddress string `protobuf:"bytes,1,opt,name=validatorConsAddress,proto3" json:"validatorConsAddress,omitempty"`
}

func (m *QueryGetValidatorConsAddressResponse) Reset()         { *m = QueryGetValidatorConsAddressResponse{} }
func (m *QueryGetValidatorConsAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorConsAddressResponse) ProtoMessage()    {}
func (*QueryGetValidatorConsAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{15}
}
func (m *QueryGetValidatorConsAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorConsAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorConsAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorConsAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorConsAddressResponse.Merge(m, src)
}
func (m *QueryGetValidatorConsAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorConsAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorConsAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorConsAddressResponse proto.InternalMessageInfo

func (m *QueryGetValidatorConsAddressResponse) GetValidatorConsAddress() string {
	if m != nil {
		return m.ValidatorConsAddress
	}
	return ""
}

// this line is used by starport scaffolding # 3
type QueryGetKeygenRequest struct {
}

func (m *QueryGetKeygenRequest) Reset()         { *m = QueryGetKeygenRequest{} }
func (m *QueryGetKeygenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeygenRequest) ProtoMessage()    {}
func (*QueryGetKeygenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{16}
}
func (m *QueryGetKeygenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeygenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeygenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeygenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeygenRequest.Merge(m, src)
}
func (m *QueryGetKeygenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeygenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeygenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeygenRequest proto.InternalMessageInfo

type QueryGetKeygenResponse struct {
	Keygen *Keygen `protobuf:"bytes,1,opt,name=Keygen,proto3" json:"Keygen,omitempty"`
}

func (m *QueryGetKeygenResponse) Reset()         { *m = QueryGetKeygenResponse{} }
func (m *QueryGetKeygenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeygenResponse) ProtoMessage()    {}
func (*QueryGetKeygenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{17}
}
func (m *QueryGetKeygenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeygenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeygenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeygenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeygenResponse.Merge(m, src)
}
func (m *QueryGetKeygenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeygenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeygenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeygenResponse proto.InternalMessageInfo

func (m *QueryGetKeygenResponse) GetKeygen() *Keygen {
	if m != nil {
		return m.Keygen
	}
	return nil
}

type QueryGetTSSVoterRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTSSVoterRequest) Reset()         { *m = QueryGetTSSVoterRequest{} }
func (m *QueryGetTSSVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSVoterRequest) ProtoMessage()    {}
func (*QueryGetTSSVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{18}
}
func (m *QueryGetTSSVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSVoterRequest.Merge(m, src)
}
func (m *QueryGetTSSVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSVoterRequest proto.InternalMessageInfo

func (m *QueryGetTSSVoterRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetTSSVoterResponse struct {
	TSSVoter *TSSVoter `protobuf:"bytes,1,opt,name=TSSVoter,proto3" json:"TSSVoter,omitempty"`
}

func (m *QueryGetTSSVoterResponse) Reset()         { *m = QueryGetTSSVoterResponse{} }
func (m *QueryGetTSSVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSVoterResponse) ProtoMessage()    {}
func (*QueryGetTSSVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{19}
}
func (m *QueryGetTSSVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSVoterResponse.Merge(m, src)
}
func (m *QueryGetTSSVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSVoterResponse proto.InternalMessageInfo

func (m *QueryGetTSSVoterResponse) GetTSSVoter() *TSSVoter {
	if m != nil {
		return m.TSSVoter
	}
	return nil
}

type QueryAllTSSVoterRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTSSVoterRequest) Reset()         { *m = QueryAllTSSVoterRequest{} }
func (m *QueryAllTSSVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTSSVoterRequest) ProtoMessage()    {}
func (*QueryAllTSSVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{20}
}
func (m *QueryAllTSSVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTSSVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTSSVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTSSVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTSSVoterRequest.Merge(m, src)
}
func (m *QueryAllTSSVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTSSVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTSSVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTSSVoterRequest proto.InternalMessageInfo

func (m *QueryAllTSSVoterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTSSVoterResponse struct {
	TSSVoter   []*TSSVoter         `protobuf:"bytes,1,rep,name=TSSVoter,proto3" json:"TSSVoter,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTSSVoterResponse) Reset()         { *m = QueryAllTSSVoterResponse{} }
func (m *QueryAllTSSVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTSSVoterResponse) ProtoMessage()    {}
func (*QueryAllTSSVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{21}
}
func (m *QueryAllTSSVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTSSVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTSSVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTSSVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTSSVoterResponse.Merge(m, src)
}
func (m *QueryAllTSSVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTSSVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTSSVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTSSVoterResponse proto.InternalMessageInfo

func (m *QueryAllTSSVoterResponse) GetTSSVoter() []*TSSVoter {
	if m != nil {
		return m.TSSVoter
	}
	return nil
}

func (m *QueryAllTSSVoterResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTSSRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTSSRequest) Reset()         { *m = QueryGetTSSRequest{} }
func (m *QueryGetTSSRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSRequest) ProtoMessage()    {}
func (*QueryGetTSSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{22}
}
func (m *QueryGetTSSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSRequest.Merge(m, src)
}
func (m *QueryGetTSSRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSRequest proto.InternalMessageInfo

func (m *QueryGetTSSRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetTSSResponse struct {
	TSS *TSS `protobuf:"bytes,1,opt,name=TSS,proto3" json:"TSS,omitempty"`
}

func (m *QueryGetTSSResponse) Reset()         { *m = QueryGetTSSResponse{} }
func (m *QueryGetTSSResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSResponse) ProtoMessage()    {}
func (*QueryGetTSSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{23}
}
func (m *QueryGetTSSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSResponse.Merge(m, src)
}
func (m *QueryGetTSSResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSResponse proto.InternalMessageInfo

func (m *QueryGetTSSResponse) GetTSS() *TSS {
	if m != nil {
		return m.TSS
	}
	return nil
}

type QueryAllTSSRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTSSRequest) Reset()         { *m = QueryAllTSSRequest{} }
func (m *QueryAllTSSRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTSSRequest) ProtoMessage()    {}
func (*QueryAllTSSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{24}
}
func (m *QueryAllTSSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTSSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTSSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTSSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTSSRequest.Merge(m, src)
}
func (m *QueryAllTSSRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTSSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTSSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTSSRequest proto.InternalMessageInfo

func (m *QueryAllTSSRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTSSResponse struct {
	TSS        []*TSS              `protobuf:"bytes,1,rep,name=TSS,proto3" json:"TSS,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTSSResponse) Reset()         { *m = QueryAllTSSResponse{} }
func (m *QueryAllTSSResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTSSResponse) ProtoMessage()    {}
func (*QueryAllTSSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{25}
}
func (m *QueryAllTSSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTSSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTSSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTSSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTSSResponse.Merge(m, src)
}
func (m *QueryAllTSSResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTSSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTSSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTSSResponse proto.InternalMessageInfo

func (m *QueryAllTSSResponse) GetTSS() []*TSS {
	if m != nil {
		return m.TSS
	}
	return nil
}

func (m *QueryAllTSSResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGasPriceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetGasPriceRequest) Reset()         { *m = QueryGetGasPriceRequest{} }
func (m *QueryGetGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasPriceRequest) ProtoMessage()    {}
func (*QueryGetGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{26}
}
func (m *QueryGetGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasPriceRequest.Merge(m, src)
}
func (m *QueryGetGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasPriceRequest proto.InternalMessageInfo

func (m *QueryGetGasPriceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetGasPriceResponse struct {
	GasPrice *GasPrice `protobuf:"bytes,1,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
}

func (m *QueryGetGasPriceResponse) Reset()         { *m = QueryGetGasPriceResponse{} }
func (m *QueryGetGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasPriceResponse) ProtoMessage()    {}
func (*QueryGetGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{27}
}
func (m *QueryGetGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasPriceResponse.Merge(m, src)
}
func (m *QueryGetGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasPriceResponse proto.InternalMessageInfo

func (m *QueryGetGasPriceResponse) GetGasPrice() *GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

type QueryAllGasPriceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasPriceRequest) Reset()         { *m = QueryAllGasPriceRequest{} }
func (m *QueryAllGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasPriceRequest) ProtoMessage()    {}
func (*QueryAllGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{28}
}
func (m *QueryAllGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasPriceRequest.Merge(m, src)
}
func (m *QueryAllGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasPriceRequest proto.InternalMessageInfo

func (m *QueryAllGasPriceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGasPriceResponse struct {
	GasPrice   []*GasPrice         `protobuf:"bytes,1,rep,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasPriceResponse) Reset()         { *m = QueryAllGasPriceResponse{} }
func (m *QueryAllGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasPriceResponse) ProtoMessage()    {}
func (*QueryAllGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{29}
}
func (m *QueryAllGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasPriceResponse.Merge(m, src)
}
func (m *QueryAllGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasPriceResponse proto.InternalMessageInfo

func (m *QueryAllGasPriceResponse) GetGasPrice() []*GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *QueryAllGasPriceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetChainNoncesRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetChainNoncesRequest) Reset()         { *m = QueryGetChainNoncesRequest{} }
func (m *QueryGetChainNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainNoncesRequest) ProtoMessage()    {}
func (*QueryGetChainNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{30}
}
func (m *QueryGetChainNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainNoncesRequest.Merge(m, src)
}
func (m *QueryGetChainNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainNoncesRequest proto.InternalMessageInfo

func (m *QueryGetChainNoncesRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetChainNoncesResponse struct {
	ChainNonces *ChainNonces `protobuf:"bytes,1,opt,name=ChainNonces,proto3" json:"ChainNonces,omitempty"`
}

func (m *QueryGetChainNoncesResponse) Reset()         { *m = QueryGetChainNoncesResponse{} }
func (m *QueryGetChainNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainNoncesResponse) ProtoMessage()    {}
func (*QueryGetChainNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{31}
}
func (m *QueryGetChainNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainNoncesResponse.Merge(m, src)
}
func (m *QueryGetChainNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainNoncesResponse proto.InternalMessageInfo

func (m *QueryGetChainNoncesResponse) GetChainNonces() *ChainNonces {
	if m != nil {
		return m.ChainNonces
	}
	return nil
}

type QueryAllChainNoncesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainNoncesRequest) Reset()         { *m = QueryAllChainNoncesRequest{} }
func (m *QueryAllChainNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainNoncesRequest) ProtoMessage()    {}
func (*QueryAllChainNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{32}
}
func (m *QueryAllChainNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainNoncesRequest.Merge(m, src)
}
func (m *QueryAllChainNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainNoncesRequest proto.InternalMessageInfo

func (m *QueryAllChainNoncesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllChainNoncesResponse struct {
	ChainNonces []*ChainNonces      `protobuf:"bytes,1,rep,name=ChainNonces,proto3" json:"ChainNonces,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainNoncesResponse) Reset()         { *m = QueryAllChainNoncesResponse{} }
func (m *QueryAllChainNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainNoncesResponse) ProtoMessage()    {}
func (*QueryAllChainNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{33}
}
func (m *QueryAllChainNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainNoncesResponse.Merge(m, src)
}
func (m *QueryAllChainNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainNoncesResponse proto.InternalMessageInfo

func (m *QueryAllChainNoncesResponse) GetChainNonces() []*ChainNonces {
	if m != nil {
		return m.ChainNonces
	}
	return nil
}

func (m *QueryAllChainNoncesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLastBlockHeightRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetLastBlockHeightRequest) Reset()         { *m = QueryGetLastBlockHeightRequest{} }
func (m *QueryGetLastBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastBlockHeightRequest) ProtoMessage()    {}
func (*QueryGetLastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{34}
}
func (m *QueryGetLastBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastBlockHeightRequest.Merge(m, src)
}
func (m *QueryGetLastBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastBlockHeightRequest proto.InternalMessageInfo

func (m *QueryGetLastBlockHeightRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetLastBlockHeightResponse struct {
	LastBlockHeight *LastBlockHeight `protobuf:"bytes,1,opt,name=LastBlockHeight,proto3" json:"LastBlockHeight,omitempty"`
}

func (m *QueryGetLastBlockHeightResponse) Reset()         { *m = QueryGetLastBlockHeightResponse{} }
func (m *QueryGetLastBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastBlockHeightResponse) ProtoMessage()    {}
func (*QueryGetLastBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{35}
}
func (m *QueryGetLastBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastBlockHeightResponse.Merge(m, src)
}
func (m *QueryGetLastBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastBlockHeightResponse proto.InternalMessageInfo

func (m *QueryGetLastBlockHeightResponse) GetLastBlockHeight() *LastBlockHeight {
	if m != nil {
		return m.LastBlockHeight
	}
	return nil
}

type QueryAllLastBlockHeightRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLastBlockHeightRequest) Reset()         { *m = QueryAllLastBlockHeightRequest{} }
func (m *QueryAllLastBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLastBlockHeightRequest) ProtoMessage()    {}
func (*QueryAllLastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{36}
}
func (m *QueryAllLastBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLastBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLastBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLastBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLastBlockHeightRequest.Merge(m, src)
}
func (m *QueryAllLastBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLastBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLastBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLastBlockHeightRequest proto.InternalMessageInfo

func (m *QueryAllLastBlockHeightRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLastBlockHeightResponse struct {
	LastBlockHeight []*LastBlockHeight  `protobuf:"bytes,1,rep,name=LastBlockHeight,proto3" json:"LastBlockHeight,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLastBlockHeightResponse) Reset()         { *m = QueryAllLastBlockHeightResponse{} }
func (m *QueryAllLastBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLastBlockHeightResponse) ProtoMessage()    {}
func (*QueryAllLastBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{37}
}
func (m *QueryAllLastBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLastBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLastBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLastBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLastBlockHeightResponse.Merge(m, src)
}
func (m *QueryAllLastBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLastBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLastBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLastBlockHeightResponse proto.InternalMessageInfo

func (m *QueryAllLastBlockHeightResponse) GetLastBlockHeight() []*LastBlockHeight {
	if m != nil {
		return m.LastBlockHeight
	}
	return nil
}

func (m *QueryAllLastBlockHeightResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCctxRequest struct {
	Index  string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Status int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *QueryGetCctxRequest) Reset()         { *m = QueryGetCctxRequest{} }
func (m *QueryGetCctxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCctxRequest) ProtoMessage()    {}
func (*QueryGetCctxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{38}
}
func (m *QueryGetCctxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCctxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCctxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCctxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCctxRequest.Merge(m, src)
}
func (m *QueryGetCctxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCctxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCctxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCctxRequest proto.InternalMessageInfo

func (m *QueryGetCctxRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *QueryGetCctxRequest) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type QueryGetCctxResponse struct {
	CrossChainTx *CrossChainTx `protobuf:"bytes,1,opt,name=CrossChainTx,proto3" json:"CrossChainTx,omitempty"`
}

func (m *QueryGetCctxResponse) Reset()         { *m = QueryGetCctxResponse{} }
func (m *QueryGetCctxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCctxResponse) ProtoMessage()    {}
func (*QueryGetCctxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{39}
}
func (m *QueryGetCctxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCctxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCctxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCctxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCctxResponse.Merge(m, src)
}
func (m *QueryGetCctxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCctxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCctxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCctxResponse proto.InternalMessageInfo

func (m *QueryGetCctxResponse) GetCrossChainTx() *CrossChainTx {
	if m != nil {
		return m.CrossChainTx
	}
	return nil
}

type QueryAllCctxRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCctxRequest) Reset()         { *m = QueryAllCctxRequest{} }
func (m *QueryAllCctxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCctxRequest) ProtoMessage()    {}
func (*QueryAllCctxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{40}
}
func (m *QueryAllCctxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCctxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCctxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCctxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCctxRequest.Merge(m, src)
}
func (m *QueryAllCctxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCctxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCctxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCctxRequest proto.InternalMessageInfo

func (m *QueryAllCctxRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCctxResponse struct {
	CrossChainTx []*CrossChainTx     `protobuf:"bytes,1,rep,name=CrossChainTx,proto3" json:"CrossChainTx,omitempty"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCctxResponse) Reset()         { *m = QueryAllCctxResponse{} }
func (m *QueryAllCctxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCctxResponse) ProtoMessage()    {}
func (*QueryAllCctxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{41}
}
func (m *QueryAllCctxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCctxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCctxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCctxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCctxResponse.Merge(m, src)
}
func (m *QueryAllCctxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCctxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCctxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCctxResponse proto.InternalMessageInfo

func (m *QueryAllCctxResponse) GetCrossChainTx() []*CrossChainTx {
	if m != nil {
		return m.CrossChainTx
	}
	return nil
}

func (m *QueryAllCctxResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCctxPendingRequest struct {
}

func (m *QueryAllCctxPendingRequest) Reset()         { *m = QueryAllCctxPendingRequest{} }
func (m *QueryAllCctxPendingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCctxPendingRequest) ProtoMessage()    {}
func (*QueryAllCctxPendingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{42}
}
func (m *QueryAllCctxPendingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCctxPendingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCctxPendingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCctxPendingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCctxPendingRequest.Merge(m, src)
}
func (m *QueryAllCctxPendingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCctxPendingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCctxPendingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCctxPendingRequest proto.InternalMessageInfo

type QueryAllCctxPendingResponse struct {
	CrossChainTx []*CrossChainTx `protobuf:"bytes,1,rep,name=CrossChainTx,proto3" json:"CrossChainTx,omitempty"`
}

func (m *QueryAllCctxPendingResponse) Reset()         { *m = QueryAllCctxPendingResponse{} }
func (m *QueryAllCctxPendingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCctxPendingResponse) ProtoMessage()    {}
func (*QueryAllCctxPendingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{43}
}
func (m *QueryAllCctxPendingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCctxPendingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCctxPendingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCctxPendingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCctxPendingResponse.Merge(m, src)
}
func (m *QueryAllCctxPendingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCctxPendingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCctxPendingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCctxPendingResponse proto.InternalMessageInfo

func (m *QueryAllCctxPendingResponse) GetCrossChainTx() []*CrossChainTx {
	if m != nil {
		return m.CrossChainTx
	}
	return nil
}

type QueryGetNodeAccountRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetNodeAccountRequest) Reset()         { *m = QueryGetNodeAccountRequest{} }
func (m *QueryGetNodeAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeAccountRequest) ProtoMessage()    {}
func (*QueryGetNodeAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{44}
}
func (m *QueryGetNodeAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeAccountRequest.Merge(m, src)
}
func (m *QueryGetNodeAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeAccountRequest proto.InternalMessageInfo

func (m *QueryGetNodeAccountRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetNodeAccountResponse struct {
	NodeAccount *NodeAccount `protobuf:"bytes,1,opt,name=NodeAccount,proto3" json:"NodeAccount,omitempty"`
}

func (m *QueryGetNodeAccountResponse) Reset()         { *m = QueryGetNodeAccountResponse{} }
func (m *QueryGetNodeAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeAccountResponse) ProtoMessage()    {}
func (*QueryGetNodeAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{45}
}
func (m *QueryGetNodeAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeAccountResponse.Merge(m, src)
}
func (m *QueryGetNodeAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeAccountResponse proto.InternalMessageInfo

func (m *QueryGetNodeAccountResponse) GetNodeAccount() *NodeAccount {
	if m != nil {
		return m.NodeAccount
	}
	return nil
}

type QueryAllNodeAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeAccountRequest) Reset()         { *m = QueryAllNodeAccountRequest{} }
func (m *QueryAllNodeAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeAccountRequest) ProtoMessage()    {}
func (*QueryAllNodeAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{46}
}
func (m *QueryAllNodeAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeAccountRequest.Merge(m, src)
}
func (m *QueryAllNodeAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeAccountRequest proto.InternalMessageInfo

func (m *QueryAllNodeAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNodeAccountResponse struct {
	NodeAccount []*NodeAccount      `protobuf:"bytes,1,rep,name=NodeAccount,proto3" json:"NodeAccount,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeAccountResponse) Reset()         { *m = QueryAllNodeAccountResponse{} }
func (m *QueryAllNodeAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeAccountResponse) ProtoMessage()    {}
func (*QueryAllNodeAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{47}
}
func (m *QueryAllNodeAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeAccountResponse.Merge(m, src)
}
func (m *QueryAllNodeAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeAccountResponse proto.InternalMessageInfo

func (m *QueryAllNodeAccountResponse) GetNodeAccount() []*NodeAccount {
	if m != nil {
		return m.NodeAccount
	}
	return nil
}

func (m *QueryAllNodeAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLastZetaHeightRequest struct {
}

func (m *QueryLastZetaHeightRequest) Reset()         { *m = QueryLastZetaHeightRequest{} }
func (m *QueryLastZetaHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastZetaHeightRequest) ProtoMessage()    {}
func (*QueryLastZetaHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{48}
}
func (m *QueryLastZetaHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastZetaHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastZetaHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastZetaHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastZetaHeightRequest.Merge(m, src)
}
func (m *QueryLastZetaHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastZetaHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastZetaHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastZetaHeightRequest proto.InternalMessageInfo

type QueryLastZetaHeightResponse struct {
	Height int64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (m *QueryLastZetaHeightResponse) Reset()         { *m = QueryLastZetaHeightResponse{} }
func (m *QueryLastZetaHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastZetaHeightResponse) ProtoMessage()    {}
func (*QueryLastZetaHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{49}
}
func (m *QueryLastZetaHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastZetaHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastZetaHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastZetaHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastZetaHeightResponse.Merge(m, src)
}
func (m *QueryLastZetaHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastZetaHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastZetaHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastZetaHeightResponse proto.InternalMessageInfo

func (m *QueryLastZetaHeightResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryConvertGasToZetaRequest struct {
	Chain    string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	GasLimit string `protobuf:"bytes,2,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
}

func (m *QueryConvertGasToZetaRequest) Reset()         { *m = QueryConvertGasToZetaRequest{} }
func (m *QueryConvertGasToZetaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConvertGasToZetaRequest) ProtoMessage()    {}
func (*QueryConvertGasToZetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{50}
}
func (m *QueryConvertGasToZetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConvertGasToZetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConvertGasToZetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConvertGasToZetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConvertGasToZetaRequest.Merge(m, src)
}
func (m *QueryConvertGasToZetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConvertGasToZetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConvertGasToZetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConvertGasToZetaRequest proto.InternalMessageInfo

func (m *QueryConvertGasToZetaRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryConvertGasToZetaRequest) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

type QueryConvertGasToZetaResponse struct {
	OutboundGasInZeta string `protobuf:"bytes,1,opt,name=outboundGasInZeta,proto3" json:"outboundGasInZeta,omitempty"`
	ProtocolFeeInZeta string `protobuf:"bytes,2,opt,name=protocolFeeInZeta,proto3" json:"protocolFeeInZeta,omitempty"`
	ZetaBlockHeight   uint64 `protobuf:"varint,3,opt,name=ZetaBlockHeight,proto3" json:"ZetaBlockHeight,omitempty"`
}

func (m *QueryConvertGasToZetaResponse) Reset()         { *m = QueryConvertGasToZetaResponse{} }
func (m *QueryConvertGasToZetaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConvertGasToZetaResponse) ProtoMessage()    {}
func (*QueryConvertGasToZetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{51}
}
func (m *QueryConvertGasToZetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConvertGasToZetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConvertGasToZetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConvertGasToZetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConvertGasToZetaResponse.Merge(m, src)
}
func (m *QueryConvertGasToZetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConvertGasToZetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConvertGasToZetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConvertGasToZetaResponse proto.InternalMessageInfo

func (m *QueryConvertGasToZetaResponse) GetOutboundGasInZeta() string {
	if m != nil {
		return m.OutboundGasInZeta
	}
	return ""
}

func (m *QueryConvertGasToZetaResponse) GetProtocolFeeInZeta() string {
	if m != nil {
		return m.ProtocolFeeInZeta
	}
	return ""
}

func (m *QueryConvertGasToZetaResponse) GetZetaBlockHeight() uint64 {
	if m != nil {
		return m.ZetaBlockHeight
	}
	return 0
}

type QueryMessagePassingProtocolFeeRequest struct {
}

func (m *QueryMessagePassingProtocolFeeRequest) Reset()         { *m = QueryMessagePassingProtocolFeeRequest{} }
func (m *QueryMessagePassingProtocolFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMessagePassingProtocolFeeRequest) ProtoMessage()    {}
func (*QueryMessagePassingProtocolFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{52}
}
func (m *QueryMessagePassingProtocolFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessagePassingProtocolFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessagePassingProtocolFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessagePassingProtocolFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessagePassingProtocolFeeRequest.Merge(m, src)
}
func (m *QueryMessagePassingProtocolFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessagePassingProtocolFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessagePassingProtocolFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessagePassingProtocolFeeRequest proto.InternalMessageInfo

type QueryMessagePassingProtocolFeeResponse struct {
	FeeInZeta string `protobuf:"bytes,1,opt,name=feeInZeta,proto3" json:"feeInZeta,omitempty"`
}

func (m *QueryMessagePassingProtocolFeeResponse) Reset() {
	*m = QueryMessagePassingProtocolFeeResponse{}
}
func (m *QueryMessagePassingProtocolFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMessagePassingProtocolFeeResponse) ProtoMessage()    {}
func (*QueryMessagePassingProtocolFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{53}
}
func (m *QueryMessagePassingProtocolFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessagePassingProtocolFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessagePassingProtocolFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessagePassingProtocolFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessagePassingProtocolFeeResponse.Merge(m, src)
}
func (m *QueryMessagePassingProtocolFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessagePassingProtocolFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessagePassingProtocolFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessagePassingProtocolFeeResponse proto.InternalMessageInfo

func (m *QueryMessagePassingProtocolFeeResponse) GetFeeInZeta() string {
	if m != nil {
		return m.FeeInZeta
	}
	return ""
}

type QueryZEVMGetTransactionReceiptRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryZEVMGetTransactionReceiptRequest) Reset()         { *m = QueryZEVMGetTransactionReceiptRequest{} }
func (m *QueryZEVMGetTransactionReceiptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryZEVMGetTransactionReceiptRequest) ProtoMessage()    {}
func (*QueryZEVMGetTransactionReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{54}
}
func (m *QueryZEVMGetTransactionReceiptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZEVMGetTransactionReceiptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZEVMGetTransactionReceiptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZEVMGetTransactionReceiptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZEVMGetTransactionReceiptRequest.Merge(m, src)
}
func (m *QueryZEVMGetTransactionReceiptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryZEVMGetTransactionReceiptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZEVMGetTransactionReceiptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZEVMGetTransactionReceiptRequest proto.InternalMessageInfo

func (m *QueryZEVMGetTransactionReceiptRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type QueryZEVMGetTransactionReceiptResponse struct {
	BlockHash         string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"blockHash"`
	BlockNumber       string `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"blockNumber"`
	ContractAddress   string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contractAddress"`
	CumulativeGasUsed string `protobuf:"bytes,4,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulativeGasUsed"`
	From              string `protobuf:"bytes,5,opt,name=from,proto3" json:"from"`
	GasUsed           string `protobuf:"bytes,6,opt,name=gas_used,json=gasUsed,proto3" json:"gasUsed"`
	LogsBloom         string `protobuf:"bytes,7,opt,name=logs_bloom,json=logsBloom,proto3" json:"logsBloom"`
	Status            string `protobuf:"bytes,8,opt,name=status,proto3" json:"status"`
	To                string `protobuf:"bytes,9,opt,name=to,proto3" json:"to"`
	TransactionHash   string `protobuf:"bytes,10,opt,name=transaction_hash,json=transactionHash,proto3" json:"transactionHash"`
	TransactionIndex  string `protobuf:"bytes,11,opt,name=transaction_index,json=transactionIndex,proto3" json:"transactionIndex"`
	Logs              []*Log `protobuf:"bytes,12,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (m *QueryZEVMGetTransactionReceiptResponse) Reset() {
	*m = QueryZEVMGetTransactionReceiptResponse{}
}
func (m *QueryZEVMGetTransactionReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryZEVMGetTransactionReceiptResponse) ProtoMessage()    {}
func (*QueryZEVMGetTransactionReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{55}
}
func (m *QueryZEVMGetTransactionReceiptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZEVMGetTransactionReceiptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZEVMGetTransactionReceiptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZEVMGetTransactionReceiptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZEVMGetTransactionReceiptResponse.Merge(m, src)
}
func (m *QueryZEVMGetTransactionReceiptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryZEVMGetTransactionReceiptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZEVMGetTransactionReceiptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZEVMGetTransactionReceiptResponse proto.InternalMessageInfo

func (m *QueryZEVMGetTransactionReceiptResponse) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetBlockNumber() string {
	if m != nil {
		return m.BlockNumber
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetCumulativeGasUsed() string {
	if m != nil {
		return m.CumulativeGasUsed
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetGasUsed() string {
	if m != nil {
		return m.GasUsed
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetLogsBloom() string {
	if m != nil {
		return m.LogsBloom
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetTransactionIndex() string {
	if m != nil {
		return m.TransactionIndex
	}
	return ""
}

func (m *QueryZEVMGetTransactionReceiptResponse) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

type Log struct {
	Address string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Topics  []string `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data    string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// sythetic fields
	BlockNumber      uint64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"blockNumber"`
	TransactionHash  string `protobuf:"bytes,5,opt,name=transaction_hash,json=transactionHash,proto3" json:"transactionHash"`
	TransactionIndex uint64 `protobuf:"varint,6,opt,name=transaction_index,json=transactionIndex,proto3" json:"transactionIndex"`
	BlockHash        string `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"blockHash"`
	LogIndex         uint64 `protobuf:"varint,8,opt,name=log_index,json=logIndex,proto3" json:"logIndex"`
	Removed          bool   `protobuf:"varint,9,opt,name=removed,proto3" json:"removed"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{56}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Log.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return m.Size()
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Log) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *Log) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Log) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *Log) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *Log) GetTransactionIndex() uint64 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

func (m *Log) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *Log) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

func (m *Log) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

type QueryZEVMGetTransactionRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryZEVMGetTransactionRequest) Reset()         { *m = QueryZEVMGetTransactionRequest{} }
func (m *QueryZEVMGetTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryZEVMGetTransactionRequest) ProtoMessage()    {}
func (*QueryZEVMGetTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{57}
}
func (m *QueryZEVMGetTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZEVMGetTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZEVMGetTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZEVMGetTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZEVMGetTransactionRequest.Merge(m, src)
}
func (m *QueryZEVMGetTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryZEVMGetTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZEVMGetTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZEVMGetTransactionRequest proto.InternalMessageInfo

func (m *QueryZEVMGetTransactionRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type QueryZEVMGetTransactionResponse struct {
	BlockHash        string   `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"blockHash"`
	BlockNumber      string   `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"blockNumber"`
	From             string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from"`
	Gas              string   `protobuf:"bytes,4,opt,name=gas,proto3" json:"gas"`
	GasPrice         string   `protobuf:"bytes,5,opt,name=gas_price,json=gasPrice,proto3" json:"gasPrice"`
	Hash             string   `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash"`
	Input            string   `protobuf:"bytes,7,opt,name=input,proto3" json:"input"`
	Nonce            string   `protobuf:"bytes,8,opt,name=nonce,proto3" json:"nonce"`
	To               string   `protobuf:"bytes,9,opt,name=to,proto3" json:"to"`
	TransactionIndex string   `protobuf:"bytes,10,opt,name=transaction_index,json=transactionIndex,proto3" json:"transactionIndex"`
	Value            string   `protobuf:"bytes,11,opt,name=value,proto3" json:"value"`
	Type             string   `protobuf:"bytes,12,opt,name=type,proto3" json:"type"`
	AccessList       []string `protobuf:"bytes,13,rep,name=access_list,json=accessList,proto3" json:"accessList"`
	ChainId          string   `protobuf:"bytes,14,opt,name=chain_id,json=chainId,proto3" json:"chainId"`
	V                string   `protobuf:"bytes,15,opt,name=v,proto3" json:"v"`
	R                string   `protobuf:"bytes,16,opt,name=r,proto3" json:"r"`
	S                string   `protobuf:"bytes,17,opt,name=s,proto3" json:"s"`
}

func (m *QueryZEVMGetTransactionResponse) Reset()         { *m = QueryZEVMGetTransactionResponse{} }
func (m *QueryZEVMGetTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryZEVMGetTransactionResponse) ProtoMessage()    {}
func (*QueryZEVMGetTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{58}
}
func (m *QueryZEVMGetTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZEVMGetTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZEVMGetTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZEVMGetTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZEVMGetTransactionResponse.Merge(m, src)
}
func (m *QueryZEVMGetTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryZEVMGetTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZEVMGetTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZEVMGetTransactionResponse proto.InternalMessageInfo

func (m *QueryZEVMGetTransactionResponse) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetBlockNumber() string {
	if m != nil {
		return m.BlockNumber
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetGas() string {
	if m != nil {
		return m.Gas
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetTransactionIndex() string {
	if m != nil {
		return m.TransactionIndex
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetAccessList() []string {
	if m != nil {
		return m.AccessList
	}
	return nil
}

func (m *QueryZEVMGetTransactionResponse) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetR() string {
	if m != nil {
		return m.R
	}
	return ""
}

func (m *QueryZEVMGetTransactionResponse) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type QueryZEVMGetBlockByNumberRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryZEVMGetBlockByNumberRequest) Reset()         { *m = QueryZEVMGetBlockByNumberRequest{} }
func (m *QueryZEVMGetBlockByNumberRequest) String() string { return proto.CompactTextString(m) }
func (*QueryZEVMGetBlockByNumberRequest) ProtoMessage()    {}
func (*QueryZEVMGetBlockByNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{59}
}
func (m *QueryZEVMGetBlockByNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZEVMGetBlockByNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZEVMGetBlockByNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZEVMGetBlockByNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZEVMGetBlockByNumberRequest.Merge(m, src)
}
func (m *QueryZEVMGetBlockByNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryZEVMGetBlockByNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZEVMGetBlockByNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZEVMGetBlockByNumberRequest proto.InternalMessageInfo

func (m *QueryZEVMGetBlockByNumberRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryZEVMGetBlockByNumberResponse struct {
	Number           string   `protobuf:"bytes,1,opt,name=number,proto3" json:"number"`
	Hash             string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash"`
	ParentHash       string   `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parentHash"`
	Nonce            string   `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce"`
	Sha3Uncles       string   `protobuf:"bytes,5,opt,name=sha3_uncles,json=sha3Uncles,proto3" json:"sha3Uncles"`
	LogsBloom        string   `protobuf:"bytes,6,opt,name=logs_bloom,json=logsBloom,proto3" json:"logsBloom"`
	TransactionsRoot string   `protobuf:"bytes,7,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactionsRoot"`
	StateRoot        string   `protobuf:"bytes,8,opt,name=state_root,json=stateRoot,proto3" json:"stateRoot"`
	ReceiptsRoot     string   `protobuf:"bytes,9,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receiptsRoot"`
	Miner            string   `protobuf:"bytes,10,opt,name=miner,proto3" json:"miner"`
	Difficulty       string   `protobuf:"bytes,11,opt,name=difficulty,proto3" json:"difficulty"`
	TotalDifficulty  string   `protobuf:"bytes,12,opt,name=total_difficulty,json=totalDifficulty,proto3" json:"totalDifficulty"`
	ExtraData        string   `protobuf:"bytes,13,opt,name=extra_data,json=extraData,proto3" json:"extraData"`
	Size_            string   `protobuf:"bytes,14,opt,name=size,proto3" json:"size"`
	GasLimit         string   `protobuf:"bytes,15,opt,name=gas_limit,json=gasLimit,proto3" json:"gasLimit"`
	GasUsed          string   `protobuf:"bytes,16,opt,name=gas_used,json=gasUsed,proto3" json:"gasUsed"`
	Timestamp        string   `protobuf:"bytes,17,opt,name=timestamp,proto3" json:"timestamp"`
	Transactions     []string `protobuf:"bytes,18,rep,name=transactions,proto3" json:"transactions"`
	Uncles           []string `protobuf:"bytes,19,rep,name=uncles,proto3" json:"uncles"`
	BaseFeePerGas    string   `protobuf:"bytes,20,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"baseFeePerGas"`
	MixHash          string   `protobuf:"bytes,21,opt,name=mix_hash,json=mixHash,proto3" json:"mixHash"`
}

func (m *QueryZEVMGetBlockByNumberResponse) Reset()         { *m = QueryZEVMGetBlockByNumberResponse{} }
func (m *QueryZEVMGetBlockByNumberResponse) String() string { return proto.CompactTextString(m) }
func (*QueryZEVMGetBlockByNumberResponse) ProtoMessage()    {}
func (*QueryZEVMGetBlockByNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a992045e92a606, []int{60}
}
func (m *QueryZEVMGetBlockByNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZEVMGetBlockByNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZEVMGetBlockByNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZEVMGetBlockByNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZEVMGetBlockByNumberResponse.Merge(m, src)
}
func (m *QueryZEVMGetBlockByNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryZEVMGetBlockByNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZEVMGetBlockByNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZEVMGetBlockByNumberResponse proto.InternalMessageInfo

func (m *QueryZEVMGetBlockByNumberResponse) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetSha3Uncles() string {
	if m != nil {
		return m.Sha3Uncles
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetLogsBloom() string {
	if m != nil {
		return m.LogsBloom
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetTransactionsRoot() string {
	if m != nil {
		return m.TransactionsRoot
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetStateRoot() string {
	if m != nil {
		return m.StateRoot
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetReceiptsRoot() string {
	if m != nil {
		return m.ReceiptsRoot
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetDifficulty() string {
	if m != nil {
		return m.Difficulty
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetTotalDifficulty() string {
	if m != nil {
		return m.TotalDifficulty
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetExtraData() string {
	if m != nil {
		return m.ExtraData
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetSize_() string {
	if m != nil {
		return m.Size_
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetGasUsed() string {
	if m != nil {
		return m.GasUsed
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetTransactions() []string {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *QueryZEVMGetBlockByNumberResponse) GetUncles() []string {
	if m != nil {
		return m.Uncles
	}
	return nil
}

func (m *QueryZEVMGetBlockByNumberResponse) GetBaseFeePerGas() string {
	if m != nil {
		return m.BaseFeePerGas
	}
	return ""
}

func (m *QueryZEVMGetBlockByNumberResponse) GetMixHash() string {
	if m != nil {
		return m.MixHash
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "zetachain.zetacore.crosschain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "zetachain.zetacore.crosschain.QueryParamsResponse")
	proto.RegisterType((*QueryGetOutTxTrackerRequest)(nil), "zetachain.zetacore.crosschain.QueryGetOutTxTrackerRequest")
	proto.RegisterType((*QueryGetOutTxTrackerResponse)(nil), "zetachain.zetacore.crosschain.QueryGetOutTxTrackerResponse")
	proto.RegisterType((*QueryAllOutTxTrackerRequest)(nil), "zetachain.zetacore.crosschain.QueryAllOutTxTrackerRequest")
	proto.RegisterType((*QueryAllOutTxTrackerResponse)(nil), "zetachain.zetacore.crosschain.QueryAllOutTxTrackerResponse")
	proto.RegisterType((*QueryAllOutTxTrackerByChainRequest)(nil), "zetachain.zetacore.crosschain.QueryAllOutTxTrackerByChainRequest")
	proto.RegisterType((*QueryAllOutTxTrackerByChainResponse)(nil), "zetachain.zetacore.crosschain.QueryAllOutTxTrackerByChainResponse")
	proto.RegisterType((*QueryGetInTxHashToCctxRequest)(nil), "zetachain.zetacore.crosschain.QueryGetInTxHashToCctxRequest")
	proto.RegisterType((*QueryGetInTxHashToCctxResponse)(nil), "zetachain.zetacore.crosschain.QueryGetInTxHashToCctxResponse")
	proto.RegisterType((*QueryAllInTxHashToCctxRequest)(nil), "zetachain.zetacore.crosschain.QueryAllInTxHashToCctxRequest")
	proto.RegisterType((*QueryAllInTxHashToCctxResponse)(nil), "zetachain.zetacore.crosschain.QueryAllInTxHashToCctxResponse")
	proto.RegisterType((*QueryGetPermissionFlagsRequest)(nil), "zetachain.zetacore.crosschain.QueryGetPermissionFlagsRequest")
	proto.RegisterType((*QueryGetPermissionFlagsResponse)(nil), "zetachain.zetacore.crosschain.QueryGetPermissionFlagsResponse")
	proto.RegisterType((*QueryGetValidatorConsAddressRequest)(nil), "zetachain.zetacore.crosschain.QueryGetValidatorConsAddressRequest")
	proto.RegisterType((*QueryGetValidatorConsAddressResponse)(nil), "zetachain.zetacore.crosschain.QueryGetValidatorConsAddressResponse")
	proto.RegisterType((*QueryGetKeygenRequest)(nil), "zetachain.zetacore.crosschain.QueryGetKeygenRequest")
	proto.RegisterType((*QueryGetKeygenResponse)(nil), "zetachain.zetacore.crosschain.QueryGetKeygenResponse")
	proto.RegisterType((*QueryGetTSSVoterRequest)(nil), "zetachain.zetacore.crosschain.QueryGetTSSVoterRequest")
	proto.RegisterType((*QueryGetTSSVoterResponse)(nil), "zetachain.zetacore.crosschain.QueryGetTSSVoterResponse")
	proto.RegisterType((*QueryAllTSSVoterRequest)(nil), "zetachain.zetacore.crosschain.QueryAllTSSVoterRequest")
	proto.RegisterType((*QueryAllTSSVoterResponse)(nil), "zetachain.zetacore.crosschain.QueryAllTSSVoterResponse")
	proto.RegisterType((*QueryGetTSSRequest)(nil), "zetachain.zetacore.crosschain.QueryGetTSSRequest")
	proto.RegisterType((*QueryGetTSSResponse)(nil), "zetachain.zetacore.crosschain.QueryGetTSSResponse")
	proto.RegisterType((*QueryAllTSSRequest)(nil), "zetachain.zetacore.crosschain.QueryAllTSSRequest")
	proto.RegisterType((*QueryAllTSSResponse)(nil), "zetachain.zetacore.crosschain.QueryAllTSSResponse")
	proto.RegisterType((*QueryGetGasPriceRequest)(nil), "zetachain.zetacore.crosschain.QueryGetGasPriceRequest")
	proto.RegisterType((*QueryGetGasPriceResponse)(nil), "zetachain.zetacore.crosschain.QueryGetGasPriceResponse")
	proto.RegisterType((*QueryAllGasPriceRequest)(nil), "zetachain.zetacore.crosschain.QueryAllGasPriceRequest")
	proto.RegisterType((*QueryAllGasPriceResponse)(nil), "zetachain.zetacore.crosschain.QueryAllGasPriceResponse")
	proto.RegisterType((*QueryGetChainNoncesRequest)(nil), "zetachain.zetacore.crosschain.QueryGetChainNoncesRequest")
	proto.RegisterType((*QueryGetChainNoncesResponse)(nil), "zetachain.zetacore.crosschain.QueryGetChainNoncesResponse")
	proto.RegisterType((*QueryAllChainNoncesRequest)(nil), "zetachain.zetacore.crosschain.QueryAllChainNoncesRequest")
	proto.RegisterType((*QueryAllChainNoncesResponse)(nil), "zetachain.zetacore.crosschain.QueryAllChainNoncesResponse")
	proto.RegisterType((*QueryGetLastBlockHeightRequest)(nil), "zetachain.zetacore.crosschain.QueryGetLastBlockHeightRequest")
	proto.RegisterType((*QueryGetLastBlockHeightResponse)(nil), "zetachain.zetacore.crosschain.QueryGetLastBlockHeightResponse")
	proto.RegisterType((*QueryAllLastBlockHeightRequest)(nil), "zetachain.zetacore.crosschain.QueryAllLastBlockHeightRequest")
	proto.RegisterType((*QueryAllLastBlockHeightResponse)(nil), "zetachain.zetacore.crosschain.QueryAllLastBlockHeightResponse")
	proto.RegisterType((*QueryGetCctxRequest)(nil), "zetachain.zetacore.crosschain.QueryGetCctxRequest")
	proto.RegisterType((*QueryGetCctxResponse)(nil), "zetachain.zetacore.crosschain.QueryGetCctxResponse")
	proto.RegisterType((*QueryAllCctxRequest)(nil), "zetachain.zetacore.crosschain.QueryAllCctxRequest")
	proto.RegisterType((*QueryAllCctxResponse)(nil), "zetachain.zetacore.crosschain.QueryAllCctxResponse")
	proto.RegisterType((*QueryAllCctxPendingRequest)(nil), "zetachain.zetacore.crosschain.QueryAllCctxPendingRequest")
	proto.RegisterType((*QueryAllCctxPendingResponse)(nil), "zetachain.zetacore.crosschain.QueryAllCctxPendingResponse")
	proto.RegisterType((*QueryGetNodeAccountRequest)(nil), "zetachain.zetacore.crosschain.QueryGetNodeAccountRequest")
	proto.RegisterType((*QueryGetNodeAccountResponse)(nil), "zetachain.zetacore.crosschain.QueryGetNodeAccountResponse")
	proto.RegisterType((*QueryAllNodeAccountRequest)(nil), "zetachain.zetacore.crosschain.QueryAllNodeAccountRequest")
	proto.RegisterType((*QueryAllNodeAccountResponse)(nil), "zetachain.zetacore.crosschain.QueryAllNodeAccountResponse")
	proto.RegisterType((*QueryLastZetaHeightRequest)(nil), "zetachain.zetacore.crosschain.QueryLastZetaHeightRequest")
	proto.RegisterType((*QueryLastZetaHeightResponse)(nil), "zetachain.zetacore.crosschain.QueryLastZetaHeightResponse")
	proto.RegisterType((*QueryConvertGasToZetaRequest)(nil), "zetachain.zetacore.crosschain.QueryConvertGasToZetaRequest")
	proto.RegisterType((*QueryConvertGasToZetaResponse)(nil), "zetachain.zetacore.crosschain.QueryConvertGasToZetaResponse")
	proto.RegisterType((*QueryMessagePassingProtocolFeeRequest)(nil), "zetachain.zetacore.crosschain.QueryMessagePassingProtocolFeeRequest")
	proto.RegisterType((*QueryMessagePassingProtocolFeeResponse)(nil), "zetachain.zetacore.crosschain.QueryMessagePassingProtocolFeeResponse")
	proto.RegisterType((*QueryZEVMGetTransactionReceiptRequest)(nil), "zetachain.zetacore.crosschain.QueryZEVMGetTransactionReceiptRequest")
	proto.RegisterType((*QueryZEVMGetTransactionReceiptResponse)(nil), "zetachain.zetacore.crosschain.QueryZEVMGetTransactionReceiptResponse")
	proto.RegisterType((*Log)(nil), "zetachain.zetacore.crosschain.Log")
	proto.RegisterType((*QueryZEVMGetTransactionRequest)(nil), "zetachain.zetacore.crosschain.QueryZEVMGetTransactionRequest")
	proto.RegisterType((*QueryZEVMGetTransactionResponse)(nil), "zetachain.zetacore.crosschain.QueryZEVMGetTransactionResponse")
	proto.RegisterType((*QueryZEVMGetBlockByNumberRequest)(nil), "zetachain.zetacore.crosschain.QueryZEVMGetBlockByNumberRequest")
	proto.RegisterType((*QueryZEVMGetBlockByNumberResponse)(nil), "zetachain.zetacore.crosschain.QueryZEVMGetBlockByNumberResponse")
}

func init() { proto.RegisterFile("crosschain/query.proto", fileDescriptor_65a992045e92a606) }

var fileDescriptor_65a992045e92a606 = []byte{
	// 3196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xcf, 0x6f, 0xdc, 0xc6,
	0xf5, 0x37, 0xb5, 0xd2, 0x4a, 0x1a, 0xc9, 0x96, 0x3d, 0x56, 0xe4, 0xcd, 0xc6, 0xd6, 0x3a, 0x74,
	0xfc, 0x23, 0x4e, 0xb2, 0x1b, 0xc9, 0x3f, 0xf2, 0x8d, 0x13, 0xe7, 0x5b, 0x49, 0x8e, 0x15, 0x23,
	0x4e, 0xa2, 0xd2, 0x72, 0x52, 0xb8, 0x4d, 0x09, 0x8a, 0x3b, 0xa2, 0x08, 0x73, 0xc9, 0x0d, 0xc9,
	0x15, 0xa4, 0x08, 0x3a, 0xc4, 0x7f, 0x41, 0x81, 0x14, 0x6d, 0x0f, 0xbd, 0x16, 0xed, 0xa1, 0x87,
	0x02, 0x2d, 0xda, 0x9e, 0xd2, 0x43, 0xdb, 0x34, 0xe8, 0xa1, 0x08, 0x90, 0x4b, 0x7b, 0x59, 0x14,
	0x71, 0x4e, 0xfb, 0x1f, 0x14, 0xe8, 0xa1, 0x98, 0xe1, 0x23, 0x39, 0xe4, 0x72, 0x97, 0xa3, 0xd5,
	0xba, 0x40, 0x2f, 0xbb, 0x33, 0x6f, 0xe6, 0xbd, 0x79, 0x9f, 0x37, 0xef, 0xcd, 0x3c, 0x92, 0x0f,
	0xcd, 0xe9, 0xae, 0xe3, 0x79, 0xfa, 0x96, 0x66, 0xda, 0xb5, 0x8f, 0x5a, 0xc4, 0xdd, 0xad, 0x36,
	0x5d, 0xc7, 0x77, 0xf0, 0x99, 0x8f, 0x89, 0xaf, 0x31, 0x72, 0x95, 0xb5, 0x1c, 0x97, 0x54, 0xe3,
	0xa9, 0xe5, 0xd3, 0x86, 0xe3, 0x18, 0x16, 0xa9, 0x69, 0x4d, 0xb3, 0xa6, 0xd9, 0xb6, 0xe3, 0x6b,
	0xbe, 0xe9, 0xd8, 0x5e, 0xc0, 0x5c, 0xbe, 0xac, 0x3b, 0x5e, 0xc3, 0xf1, 0x6a, 0x1b, 0x9a, 0x47,
	0x02, 0xa9, 0xb5, 0xed, 0x85, 0x0d, 0xe2, 0x6b, 0x0b, 0xb5, 0xa6, 0x66, 0x98, 0x36, 0x9b, 0x0c,
	0x73, 0x2b, 0x9c, 0x02, 0x4e, 0xcb, 0x57, 0xfd, 0x1d, 0xd5, 0x77, 0x35, 0xfd, 0x21, 0x71, 0x61,
	0xc2, 0x39, 0x6e, 0x82, 0x69, 0xd3, 0xf1, 0x2d, 0xcd, 0xdb, 0x52, 0x7d, 0x47, 0xd5, 0x75, 0x7f,
	0x07, 0x26, 0x3d, 0xcb, 0x4d, 0x6a, 0x12, 0xb7, 0x61, 0x7a, 0x9e, 0xe9, 0xd8, 0xea, 0xa6, 0xa5,
	0x19, 0xa1, 0x52, 0xb3, 0x86, 0x63, 0x38, 0xac, 0x59, 0xa3, 0x2d, 0xa0, 0x9e, 0xe2, 0x18, 0x1f,
	0x92, 0x5d, 0x83, 0x84, 0x7a, 0x95, 0xb9, 0x01, 0xdf, 0xf3, 0xd4, 0x6d, 0xc7, 0x8f, 0x54, 0x9a,
	0x4d, 0x8e, 0x65, 0x70, 0x18, 0x9a, 0xa7, 0x36, 0x5d, 0x53, 0x27, 0x30, 0x76, 0x86, 0x1b, 0x63,
	0xbf, 0xaa, 0xed, 0xd8, 0x3a, 0x09, 0x59, 0x65, 0x6e, 0xd8, 0xd2, 0x3c, 0x5f, 0xdd, 0xb0, 0x1c,
	0xfd, 0xa1, 0xba, 0x45, 0x4c, 0x63, 0xcb, 0xcf, 0x30, 0x14, 0x6b, 0xaa, 0x81, 0xa0, 0xc8, 0x06,
	0xfc, 0x1a, 0xb6, 0x53, 0x27, 0xaa, 0xa6, 0xeb, 0x4e, 0xcb, 0xf6, 0x33, 0x90, 0x36, 0x35, 0x57,
	0x6b, 0xc0, 0xe2, 0xf2, 0x2c, 0xc2, 0xdf, 0xa6, 0x7b, 0xb4, 0xc6, 0x88, 0x0a, 0xf9, 0xa8, 0x45,
	0x3c, 0x5f, 0x7e, 0x80, 0x4e, 0x26, 0xa8, 0x5e, 0xd3, 0xb1, 0x3d, 0x82, 0x57, 0x50, 0x31, 0x60,
	0x2e, 0x49, 0x67, 0xa5, 0x4b, 0x53, 0x8b, 0xe7, 0xab, 0x7d, 0x1d, 0xa5, 0x1a, 0xb0, 0x2f, 0x8f,
	0x7e, 0xd1, 0xae, 0x1c, 0x51, 0x80, 0x55, 0x7e, 0x07, 0x3d, 0xc3, 0x64, 0xaf, 0x12, 0xff, 0xbd,
	0x96, 0xbf, 0xbe, 0xb3, 0x1e, 0x6c, 0x38, 0x2c, 0x8d, 0x4b, 0x68, 0x9c, 0x31, 0xdf, 0xb9, 0xc5,
	0x16, 0x29, 0x28, 0x61, 0x17, 0xcf, 0xa2, 0x31, 0x66, 0xb7, 0xd2, 0xc8, 0x59, 0xe9, 0xd2, 0xa8,
	0x12, 0x74, 0xe4, 0x16, 0x3a, 0x9d, 0x2d, 0x0e, 0x74, 0xbe, 0x8f, 0xa6, 0x1d, 0x8e, 0x0e, 0x9a,
	0xbf, 0x90, 0xa3, 0x39, 0x2f, 0x0a, 0xf4, 0x4f, 0x88, 0x91, 0x09, 0xa0, 0x58, 0xb2, 0xac, 0x2c,
	0x14, 0xb7, 0x11, 0x8a, 0x9d, 0x1d, 0xd6, 0xbc, 0x50, 0x0d, 0x22, 0xa3, 0x4a, 0x23, 0xa3, 0x1a,
	0xc4, 0x1b, 0x44, 0x46, 0x75, 0x4d, 0x33, 0x08, 0xf0, 0x2a, 0x1c, 0xa7, 0xfc, 0x99, 0x04, 0xf0,
	0xba, 0xd6, 0xe9, 0x09, 0xaf, 0x30, 0x04, 0x78, 0x78, 0x35, 0xa1, 0xff, 0x08, 0xd3, 0xff, 0x62,
	0xae, 0xfe, 0x81, 0x4e, 0x09, 0x00, 0x8f, 0x24, 0x24, 0x67, 0x01, 0x58, 0xde, 0x5d, 0xa1, 0x9a,
	0x84, 0xf6, 0x9a, 0x45, 0x63, 0x4c, 0x33, 0xd8, 0xf3, 0xa0, 0x93, 0xb2, 0xe2, 0xc8, 0xc0, 0x56,
	0xfc, 0xb3, 0x84, 0xce, 0xf5, 0x55, 0xe2, 0x7f, 0xc4, 0x98, 0xaf, 0xa1, 0x33, 0xa1, 0xaf, 0xdf,
	0xb1, 0xd7, 0x77, 0xde, 0xd2, 0xbc, 0xad, 0x75, 0x67, 0x45, 0xf7, 0x77, 0x42, 0x33, 0x96, 0xd1,
	0x84, 0x09, 0x03, 0xcc, 0x92, 0x93, 0x4a, 0xd4, 0x97, 0xf7, 0xd1, 0x7c, 0x2f, 0x66, 0x80, 0xff,
	0x5d, 0x74, 0xcc, 0x4c, 0x8c, 0x80, 0xe3, 0xbe, 0x94, 0x63, 0x80, 0xa4, 0x38, 0x30, 0x41, 0x4a,
	0x94, 0x6c, 0x80, 0xee, 0x4b, 0x96, 0x95, 0xad, 0xfb, 0xb0, 0x42, 0xe6, 0x73, 0x09, 0x80, 0x66,
	0xac, 0xd4, 0x07, 0x68, 0x61, 0x48, 0x40, 0x87, 0xb7, 0xdb, 0x67, 0xe3, 0x0d, 0x5b, 0x8b, 0x6e,
	0xb5, 0xdb, 0xf4, 0x52, 0x0b, 0x8f, 0xe9, 0x4f, 0x24, 0x54, 0xe9, 0x39, 0x05, 0xb0, 0x7e, 0x1f,
	0xcd, 0xa4, 0x86, 0xc0, 0xb6, 0xd5, 0xbc, 0xc3, 0x3b, 0xc9, 0x05, 0x68, 0xd3, 0xc2, 0x64, 0x0d,
	0x42, 0x6b, 0x95, 0xf8, 0xef, 0x6b, 0x96, 0x59, 0xd7, 0x7c, 0xc7, 0x5d, 0x71, 0x6c, 0x6f, 0xa9,
	0x5e, 0x77, 0x89, 0x17, 0xaa, 0x8a, 0x6f, 0xa0, 0xd2, 0x76, 0x38, 0xfc, 0x5e, 0x93, 0xb8, 0xf4,
	0x1f, 0xa6, 0x80, 0xa7, 0xf6, 0x1c, 0x97, 0x1f, 0xa0, 0xe7, 0xfa, 0x2f, 0x01, 0x50, 0x17, 0xd1,
	0xec, 0x76, 0xc6, 0x38, 0xc8, 0xcf, 0x1c, 0x93, 0x4f, 0xa1, 0xa7, 0x42, 0xd9, 0x6f, 0xb3, 0x0c,
	0x20, 0xb4, 0xed, 0x07, 0x68, 0x2e, 0x3d, 0x00, 0xcb, 0xdc, 0x44, 0xc5, 0x80, 0x22, 0x78, 0x0b,
	0x02, 0x3b, 0x30, 0xc9, 0x35, 0x74, 0x2a, 0x14, 0xbc, 0x7e, 0xef, 0xde, 0xfb, 0x34, 0xb3, 0xe0,
	0x4e, 0x41, 0xd3, 0xae, 0x93, 0x1d, 0xd0, 0x38, 0xe8, 0xc8, 0x2a, 0x2a, 0x75, 0x33, 0x44, 0x37,
	0xf2, 0x44, 0x48, 0x03, 0x6d, 0x2e, 0xe6, 0x68, 0x13, 0x89, 0x88, 0x18, 0x65, 0x0d, 0x34, 0x5a,
	0xb2, 0xac, 0xb4, 0x46, 0xc3, 0x0a, 0xca, 0x5f, 0x48, 0x00, 0x22, 0xb1, 0x46, 0x26, 0x88, 0xc2,
	0x40, 0x20, 0x86, 0x17, 0x76, 0x97, 0x21, 0x23, 0x0a, 0xcc, 0xdd, 0x7f, 0x6b, 0xde, 0x86, 0x3c,
	0x29, 0x9c, 0x0b, 0x80, 0xae, 0xa2, 0xc2, 0xfa, 0xbd, 0x7b, 0x60, 0x2e, 0x39, 0x1f, 0x8b, 0x42,
	0xa7, 0xcb, 0xdf, 0x83, 0x85, 0x03, 0x13, 0x0d, 0x7b, 0x07, 0x7e, 0x28, 0x81, 0xae, 0xa1, 0xf8,
	0xb4, 0xae, 0x85, 0x03, 0xe8, 0x3a, 0x3c, 0x6b, 0x73, 0xd1, 0xb0, 0xaa, 0x79, 0x6b, 0x34, 0x6b,
	0x16, 0x8e, 0x86, 0x98, 0x21, 0x76, 0xa4, 0x90, 0x26, 0x18, 0x0d, 0x91, 0x88, 0x88, 0x91, 0x8f,
	0x86, 0xb4, 0x46, 0x4f, 0x22, 0x1a, 0x72, 0x40, 0x14, 0x06, 0x02, 0x31, 0xbc, 0xfd, 0x59, 0x44,
	0xe5, 0xd0, 0xdc, 0x2c, 0x57, 0x7a, 0x97, 0x3d, 0xb9, 0xf4, 0xdf, 0xa2, 0x87, 0x71, 0x86, 0x9f,
	0xe0, 0x01, 0x80, 0x77, 0xd1, 0x14, 0x47, 0x06, 0x33, 0x5e, 0xce, 0xc1, 0xc8, 0x0b, 0xe2, 0xd9,
	0xe5, 0x3a, 0x28, 0xb8, 0x64, 0x59, 0x19, 0x0a, 0x0e, 0x6b, 0xc7, 0x7e, 0x23, 0xc5, 0xf9, 0xbe,
	0x10, 0xa6, 0xc2, 0x21, 0x30, 0x0d, 0x6f, 0xf7, 0xae, 0xc7, 0x29, 0xc4, 0x5d, 0xcd, 0xf3, 0x97,
	0xe9, 0x83, 0xe5, 0x5b, 0xec, 0xb9, 0xb2, 0xff, 0x0e, 0xee, 0xc5, 0x79, 0x45, 0x17, 0x1f, 0x20,
	0xfe, 0x0e, 0x9a, 0x49, 0x0d, 0x09, 0xe6, 0x15, 0x69, 0x81, 0x69, 0x31, 0xf2, 0x56, 0x9c, 0xbf,
	0xf5, 0x50, 0x7a, 0x58, 0xbb, 0xfa, 0xa7, 0x30, 0x7f, 0xca, 0x5a, 0xaa, 0x1f, 0xce, 0xc2, 0x10,
	0x70, 0x0e, 0x6f, 0x97, 0x57, 0xe2, 0x5b, 0x88, 0x4f, 0xa8, 0x33, 0xb7, 0x16, 0xcf, 0xa1, 0xa2,
	0xe7, 0x6b, 0x7e, 0xcb, 0x63, 0x2b, 0x8e, 0x29, 0xd0, 0x93, 0x0d, 0x34, 0x9b, 0x14, 0x02, 0xf8,
	0xdf, 0x43, 0xd3, 0x2b, 0x14, 0x14, 0xf3, 0xcf, 0xf5, 0x1d, 0xc1, 0xe7, 0x67, 0x9e, 0x45, 0x49,
	0x08, 0x90, 0x3f, 0x8c, 0xef, 0xa1, 0x27, 0x91, 0xfe, 0xff, 0x4a, 0x02, 0x20, 0x91, 0xfc, 0x9e,
	0x40, 0x0a, 0x87, 0x02, 0x32, 0xbc, 0xfd, 0x3b, 0xcd, 0x1d, 0x61, 0xba, 0xbf, 0xb3, 0x46, 0xec,
	0xba, 0x69, 0x1b, 0x61, 0x22, 0x6a, 0x73, 0x27, 0x0f, 0x3f, 0xfa, 0x84, 0x60, 0xf1, 0x27, 0xfe,
	0xbb, 0x4e, 0x9d, 0x2c, 0x05, 0xef, 0x91, 0x84, 0x4f, 0xfc, 0x04, 0x4f, 0x7c, 0x3a, 0x72, 0x64,
	0xc1, 0x13, 0x9f, 0x17, 0xc4, 0xb3, 0xf3, 0x27, 0x7e, 0x86, 0x82, 0x4f, 0xe2, 0xc4, 0x17, 0xc2,
	0x54, 0x38, 0x04, 0xa6, 0xe1, 0xfb, 0x12, 0x3d, 0x6c, 0x1e, 0x10, 0x5f, 0x4b, 0x1c, 0x9c, 0xf2,
	0x35, 0xc0, 0x94, 0x1e, 0x05, 0x4c, 0x73, 0xa8, 0xc8, 0x1d, 0xe5, 0x05, 0x05, 0x7a, 0xf2, 0x1a,
	0xbc, 0x84, 0x5a, 0x71, 0xec, 0x6d, 0xe2, 0xd2, 0xbc, 0x6b, 0xdd, 0xa1, 0xec, 0x99, 0x6f, 0x6f,
	0x26, 0xc3, 0xb7, 0x37, 0x65, 0x34, 0x61, 0x68, 0xde, 0x5d, 0xb3, 0x61, 0xfa, 0x0c, 0xd1, 0xa4,
	0x12, 0xf5, 0xe5, 0x9f, 0x49, 0xf0, 0x3a, 0xa0, 0x5b, 0x24, 0xe8, 0xf2, 0x22, 0x3a, 0xe1, 0xb4,
	0xfc, 0x0d, 0xa7, 0x65, 0xd7, 0x57, 0x35, 0xef, 0x8e, 0x4d, 0x07, 0x41, 0x7e, 0xf7, 0x00, 0x9d,
	0xcd, 0xde, 0x67, 0xea, 0x8e, 0x75, 0x9b, 0x10, 0x98, 0x1d, 0x2c, 0xda, 0x3d, 0x80, 0x2f, 0xa1,
	0x19, 0xfa, 0xcf, 0x9f, 0xe9, 0x05, 0xf6, 0x4e, 0x31, 0x4d, 0x96, 0x2f, 0xa2, 0xf3, 0x4c, 0xcd,
	0x77, 0x88, 0xe7, 0x69, 0x06, 0x59, 0xd3, 0x3c, 0xcf, 0xb4, 0x8d, 0xb5, 0x58, 0x62, 0x68, 0xd9,
	0xdb, 0xe8, 0x42, 0xde, 0x44, 0x00, 0x76, 0x1a, 0x4d, 0x6e, 0x46, 0x2a, 0x06, 0x80, 0x62, 0x82,
	0xfc, 0x1a, 0x2c, 0xf8, 0xe0, 0xcd, 0xf7, 0xdf, 0xa1, 0x4f, 0x15, 0xae, 0x66, 0x7b, 0x9a, 0x4e,
	0xb7, 0x56, 0x21, 0x3a, 0x31, 0x9b, 0x91, 0x9f, 0x63, 0x34, 0xba, 0x15, 0xbf, 0xe6, 0x61, 0x6d,
	0xf9, 0xdf, 0xa3, 0xa0, 0x45, 0x1f, 0xee, 0xc8, 0xbc, 0x08, 0x5e, 0x33, 0x47, 0x42, 0x96, 0x8f,
	0x76, 0xda, 0x95, 0x49, 0x46, 0x7d, 0x4b, 0xf3, 0xb6, 0x94, 0xb8, 0x89, 0x17, 0xd1, 0x74, 0x30,
	0xdb, 0x6e, 0x35, 0x36, 0x88, 0x1b, 0x58, 0x76, 0x79, 0xa6, 0xd3, 0xae, 0x4c, 0x31, 0xfa, 0xbb,
	0x8c, 0xac, 0xf0, 0x1d, 0xfc, 0x06, 0x3a, 0xae, 0x3b, 0xb6, 0xef, 0x6a, 0xba, 0xaf, 0x6a, 0xf0,
	0x24, 0x5e, 0x60, 0x7c, 0x27, 0x3b, 0xed, 0xca, 0x4c, 0x38, 0x16, 0x3e, 0xc4, 0xa7, 0x09, 0xf8,
	0x4d, 0x74, 0x52, 0x6f, 0x35, 0x5a, 0x96, 0xe6, 0x9b, 0xdb, 0x44, 0x35, 0x34, 0x4f, 0x6d, 0x79,
	0xa4, 0x5e, 0x1a, 0x65, 0x22, 0x9e, 0xea, 0xb4, 0x2b, 0x27, 0xe2, 0xe1, 0x55, 0xcd, 0xbb, 0xef,
	0x91, 0xba, 0xd2, 0x4d, 0xc2, 0xa7, 0xd1, 0xe8, 0xa6, 0xeb, 0x34, 0x4a, 0x63, 0x8c, 0x6f, 0xa2,
	0xd3, 0xae, 0xb0, 0xbe, 0xc2, 0x7e, 0xf1, 0x05, 0xe6, 0xa3, 0x81, 0xe4, 0x22, 0x9b, 0x31, 0xd5,
	0x69, 0x57, 0xc6, 0x0d, 0x90, 0x17, 0x36, 0xa8, 0xb9, 0x2c, 0xc7, 0xf0, 0xd4, 0x0d, 0xcb, 0x71,
	0x1a, 0xa5, 0xf1, 0xd8, 0x5c, 0x94, 0xba, 0x4c, 0x89, 0x4a, 0xdc, 0xc4, 0x72, 0x74, 0xc7, 0x4e,
	0xb0, 0x99, 0xa8, 0xd3, 0xae, 0x00, 0x25, 0xbc, 0x6f, 0xf1, 0x1c, 0x1a, 0xf1, 0x9d, 0xd2, 0x24,
	0x1b, 0x2f, 0x76, 0xda, 0x95, 0x11, 0xdf, 0x51, 0x46, 0x7c, 0x87, 0x9a, 0xcd, 0x8f, 0xb7, 0x2d,
	0xd8, 0x1e, 0x14, 0x9b, 0x8d, 0x1b, 0x63, 0x9b, 0x94, 0x26, 0xe0, 0x25, 0x74, 0x82, 0xe7, 0x0f,
	0x0e, 0xeb, 0x29, 0x26, 0x60, 0xb6, 0xd3, 0xae, 0xf0, 0xc2, 0xef, 0xd0, 0x31, 0xa5, 0x8b, 0x82,
	0xaf, 0xa3, 0x51, 0x8a, 0xa5, 0x34, 0x2d, 0xf4, 0x4c, 0x78, 0xd7, 0x31, 0x14, 0x36, 0x5f, 0x7e,
	0x54, 0x40, 0x85, 0xbb, 0x8e, 0x81, 0x4b, 0x68, 0x5c, 0x4b, 0xbc, 0x7a, 0x09, 0xbb, 0xf4, 0x80,
	0xf1, 0x9d, 0xa6, 0xa9, 0xd3, 0xe4, 0xa3, 0x70, 0x69, 0x52, 0x81, 0x1e, 0x75, 0xe6, 0xba, 0xe6,
	0x6b, 0x81, 0x7f, 0x28, 0xac, 0xdd, 0xe5, 0x73, 0x74, 0xe3, 0x47, 0xf3, 0x7d, 0xae, 0xcb, 0x78,
	0x63, 0x87, 0x35, 0x5e, 0x91, 0x2d, 0x2c, 0x6a, 0xbc, 0x64, 0x60, 0x8d, 0xe7, 0x04, 0xd6, 0xf3,
	0x88, 0xba, 0x0d, 0x2c, 0x34, 0xc1, 0x16, 0x9a, 0xee, 0xb4, 0x2b, 0x13, 0x96, 0x63, 0x04, 0x0b,
	0x44, 0x2d, 0x7c, 0x1e, 0x8d, 0xbb, 0xa4, 0xe1, 0x6c, 0x93, 0x3a, 0xf3, 0x9a, 0x89, 0xc0, 0x53,
	0x81, 0xa4, 0x84, 0x0d, 0xf9, 0x2a, 0x64, 0xcf, 0x59, 0x47, 0x40, 0xef, 0x93, 0xe3, 0x5f, 0xa3,
	0x90, 0x09, 0x67, 0xb1, 0xfd, 0xd7, 0x8e, 0x8c, 0x30, 0x56, 0x0b, 0x99, 0xb1, 0xfa, 0x34, 0x2a,
	0x18, 0x9a, 0x07, 0x07, 0xc0, 0x78, 0xa7, 0x5d, 0xa1, 0x5d, 0x85, 0xfe, 0x50, 0x33, 0x46, 0x1f,
	0xdd, 0x60, 0xc3, 0x99, 0x19, 0x8d, 0xe8, 0xc9, 0x38, 0x6c, 0xd1, 0x35, 0x98, 0xfe, 0xc5, 0x78,
	0x0d, 0xda, 0x0f, 0xec, 0x80, 0x2b, 0x34, 0xbd, 0x69, 0xb6, 0x7c, 0xd8, 0xb8, 0xc9, 0x4e, 0xbb,
	0x12, 0x10, 0x94, 0xe0, 0x8f, 0x4e, 0x08, 0x3e, 0x42, 0x4d, 0xc4, 0x13, 0x18, 0x01, 0xbe, 0x47,
	0xf5, 0x8c, 0xeb, 0x4c, 0xd7, 0x42, 0x07, 0x8a, 0xcb, 0x0a, 0x1a, 0xdb, 0xd6, 0xac, 0x16, 0x81,
	0x70, 0x66, 0x6b, 0x33, 0x82, 0x12, 0xfc, 0x51, 0x6c, 0xfe, 0x6e, 0x93, 0x94, 0xa6, 0x63, 0x6c,
	0xb4, 0xaf, 0xb0, 0x5f, 0x5c, 0x43, 0x53, 0x9a, 0xae, 0x13, 0xcf, 0x53, 0x2d, 0xd3, 0xf3, 0x4b,
	0x47, 0x69, 0x04, 0x2e, 0x1f, 0xeb, 0xb4, 0x2b, 0x28, 0x20, 0xdf, 0x35, 0x69, 0x0a, 0x14, 0xb7,
	0xe9, 0xe1, 0x18, 0x7c, 0x65, 0x34, 0xeb, 0xa5, 0x63, 0xf1, 0xe1, 0x18, 0x7c, 0x8f, 0xab, 0x87,
	0x1f, 0xe6, 0xea, 0xf8, 0x24, 0x92, 0xb6, 0x4b, 0x33, 0x6c, 0xc2, 0x58, 0xa7, 0x5d, 0x91, 0xb6,
	0x15, 0x69, 0x9b, 0x12, 0xdd, 0xd2, 0xf1, 0x98, 0xe8, 0x2a, 0x92, 0x4b, 0x89, 0x5e, 0xe9, 0x44,
	0x4c, 0xf4, 0x14, 0xc9, 0x93, 0x6f, 0xa0, 0xb3, 0xbc, 0xeb, 0xb1, 0xeb, 0x77, 0x79, 0x17, 0xfc,
	0x03, 0x7c, 0x76, 0x0e, 0x15, 0xb7, 0xe2, 0xcc, 0x64, 0x54, 0x81, 0x9e, 0xfc, 0x8f, 0x71, 0xf4,
	0x6c, 0x1f, 0x66, 0xf0, 0x5c, 0x19, 0x15, 0xc1, 0x0b, 0xa5, 0xf8, 0x3c, 0x0e, 0x28, 0x0a, 0xfc,
	0x47, 0x7e, 0x31, 0x92, 0xe9, 0x17, 0x35, 0x34, 0xd5, 0xd4, 0x5c, 0x62, 0xfb, 0x81, 0xf3, 0x07,
	0x0e, 0xca, 0x6c, 0x17, 0x90, 0x99, 0xf7, 0x73, 0xed, 0xd8, 0x4f, 0x46, 0x7b, 0xf8, 0x49, 0x0d,
	0x4d, 0x79, 0x5b, 0xda, 0x15, 0xb5, 0x65, 0xeb, 0x16, 0xf1, 0xc0, 0x69, 0x99, 0x44, 0x4a, 0xbe,
	0xcf, 0xa8, 0x0a, 0xd7, 0x4e, 0x5d, 0x41, 0xc5, 0x9c, 0x2b, 0x28, 0xe9, 0x6e, 0x9e, 0xea, 0x3a,
	0x4e, 0xe8, 0xd4, 0x69, 0x77, 0xf3, 0x14, 0xc7, 0xf1, 0x95, 0x2e, 0x0a, 0x5d, 0x90, 0xde, 0x55,
	0x24, 0xe0, 0x9d, 0x88, 0x17, 0x64, 0x54, 0xc6, 0x14, 0x37, 0xf1, 0x35, 0x74, 0xd4, 0x0d, 0x72,
	0x0c, 0x58, 0x2c, 0x08, 0x81, 0xe3, 0x9d, 0x76, 0x65, 0x3a, 0x1c, 0x60, 0x3c, 0x89, 0x1e, 0xb5,
	0x53, 0xc3, 0xb4, 0x89, 0x0b, 0xa1, 0xc0, 0xec, 0xc4, 0x08, 0x4a, 0xf0, 0x87, 0xab, 0x08, 0xd5,
	0xcd, 0xcd, 0x4d, 0x53, 0x6f, 0x59, 0xfe, 0x2e, 0x78, 0x3e, 0x33, 0x53, 0x4c, 0x55, 0xb8, 0x36,
	0xbb, 0x02, 0x1c, 0x5f, 0xb3, 0x54, 0x8e, 0x6b, 0x9a, 0xbb, 0x02, 0xe8, 0xd8, 0xad, 0x98, 0x35,
	0x4d, 0xa0, 0xa8, 0xc9, 0x8e, 0xef, 0x6a, 0x2a, 0xbb, 0x90, 0x8e, 0xc6, 0xa8, 0x19, 0xf5, 0x96,
	0xe6, 0x6b, 0x4a, 0xdc, 0xa4, 0x5e, 0xe3, 0x99, 0x1f, 0x13, 0x08, 0x0f, 0xe6, 0x35, 0xb4, 0xaf,
	0xb0, 0xdf, 0xf0, 0x58, 0xb2, 0x58, 0x0a, 0x3c, 0x93, 0x38, 0x96, 0x58, 0x1a, 0x1c, 0x27, 0xc4,
	0x89, 0x44, 0xe4, 0x78, 0x9f, 0x44, 0xe4, 0x05, 0x34, 0xe9, 0x9b, 0x0d, 0xe2, 0xf9, 0x5a, 0xa3,
	0x09, 0x91, 0xc4, 0xb4, 0x8b, 0x88, 0x4a, 0xdc, 0xc4, 0x57, 0xd1, 0x34, 0xbf, 0xab, 0x25, 0xcc,
	0x42, 0x9e, 0x6d, 0x49, 0x62, 0xb7, 0x13, 0x3d, 0x1a, 0x2d, 0xe0, 0x94, 0x27, 0xd9, 0x7c, 0x16,
	0x2d, 0x01, 0x45, 0x81, 0x7f, 0x7c, 0x03, 0x1d, 0xa7, 0x4f, 0x25, 0xea, 0x26, 0x21, 0x6a, 0x93,
	0xb8, 0x34, 0x3d, 0x2b, 0xcd, 0x32, 0x6d, 0x4e, 0x74, 0xda, 0x95, 0xa3, 0x74, 0xec, 0x36, 0x21,
	0x6b, 0xc4, 0x5d, 0xd5, 0x3c, 0x25, 0xd9, 0xa5, 0x50, 0x1b, 0x66, 0x50, 0xc8, 0x51, 0x7a, 0x2a,
	0x86, 0xda, 0x30, 0xd9, 0x57, 0x34, 0x25, 0x6c, 0x2c, 0x3e, 0x7a, 0x11, 0x8d, 0xb1, 0xd8, 0xc6,
	0x3f, 0x92, 0x50, 0x31, 0xa8, 0x25, 0xc0, 0x0b, 0x39, 0xd9, 0x48, 0x77, 0x31, 0x43, 0x79, 0xf1,
	0x20, 0x2c, 0xc1, 0x89, 0x21, 0x9f, 0x7f, 0xf4, 0xd5, 0x37, 0x9f, 0x8e, 0x54, 0xf0, 0x99, 0x1a,
	0xe5, 0x78, 0x89, 0x2b, 0xbc, 0xe0, 0x6b, 0x28, 0xf0, 0x37, 0x12, 0x7a, 0xba, 0x67, 0xae, 0x8d,
	0x6f, 0x89, 0x2c, 0x9c, 0x97, 0xe8, 0x97, 0xdf, 0x3c, 0xa4, 0x14, 0x40, 0x74, 0x83, 0x21, 0xba,
	0x8a, 0x17, 0x79, 0x44, 0x1f, 0x93, 0xed, 0x06, 0xfb, 0x51, 0x8d, 0x2c, 0xe6, 0xda, 0x1e, 0xdd,
	0xa4, 0x7d, 0xfc, 0x37, 0x09, 0xe1, 0xee, 0x15, 0xf0, 0xcd, 0x41, 0x35, 0x0b, 0x80, 0xbd, 0x31,
	0x28, 0x3b, 0x20, 0x7a, 0x95, 0x21, 0xba, 0x82, 0x17, 0x44, 0x10, 0x2d, 0xef, 0x52, 0x9f, 0x0a,
	0x01, 0xfd, 0x55, 0x42, 0xd3, 0xfc, 0x8d, 0x81, 0xff, 0xff, 0x00, 0xba, 0x64, 0x5d, 0x50, 0xe5,
	0x6f, 0x0d, 0x2e, 0x00, 0xe0, 0xbc, 0xc2, 0xe0, 0x2c, 0xe0, 0x5a, 0x4f, 0x38, 0x09, 0xbe, 0xda,
	0x5e, 0x70, 0x05, 0xee, 0xe3, 0xcf, 0x25, 0x34, 0xcd, 0xd7, 0x20, 0xe0, 0x1b, 0x22, 0xba, 0x64,
	0x97, 0xdf, 0x94, 0x5f, 0x1b, 0x88, 0x17, 0x20, 0xdc, 0x64, 0x10, 0x5e, 0xc1, 0xd7, 0x7a, 0x44,
	0x0d, 0x5f, 0x15, 0x51, 0xdb, 0x83, 0xba, 0x9e, 0xfd, 0xda, 0x1e, 0xbb, 0x11, 0xf7, 0xf1, 0xef,
	0x24, 0x34, 0xc3, 0xcb, 0x5d, 0xb2, 0x2c, 0x31, 0x2c, 0xd9, 0x45, 0x38, 0x62, 0x58, 0x7a, 0x14,
	0xd6, 0xc8, 0x2f, 0x30, 0x2c, 0xe7, 0xf1, 0x39, 0x01, 0x2c, 0xf8, 0x2b, 0x09, 0xcd, 0xa5, 0x34,
	0x87, 0xda, 0x12, 0xbc, 0x34, 0x80, 0x12, 0xc9, 0xe2, 0x98, 0xf2, 0xf2, 0x61, 0x44, 0x00, 0x9c,
	0x45, 0x06, 0xe7, 0x45, 0x7c, 0x59, 0x00, 0x4e, 0xa8, 0xfa, 0x5f, 0x24, 0x74, 0x2c, 0x59, 0xf2,
	0x80, 0x5f, 0x17, 0x74, 0x8f, 0xcc, 0x12, 0x8f, 0xf2, 0xcd, 0x01, 0xb9, 0x01, 0xc3, 0xff, 0x31,
	0x0c, 0x8b, 0xf8, 0xe5, 0x1e, 0x18, 0x92, 0x85, 0x18, 0xb5, 0xbd, 0xb0, 0xbf, 0x8f, 0xff, 0x20,
	0xa1, 0x13, 0x49, 0xa1, 0xd4, 0xb7, 0x5e, 0x17, 0xb4, 0xeb, 0x21, 0xc0, 0xf4, 0xac, 0x41, 0x91,
	0x5f, 0x62, 0x60, 0x2e, 0xe2, 0xf3, 0x42, 0x60, 0xe8, 0x89, 0x95, 0x2e, 0xbd, 0xc0, 0xa2, 0xe6,
	0xcc, 0xae, 0x1e, 0x11, 0x3b, 0x7f, 0x7b, 0x57, 0x96, 0x64, 0x6f, 0x47, 0x28, 0xa8, 0xd6, 0xa7,
	0x26, 0x13, 0x7f, 0x32, 0x82, 0x4e, 0xf5, 0x28, 0xe6, 0xc0, 0xcb, 0x82, 0x5a, 0xf5, 0x29, 0x36,
	0x29, 0xaf, 0x1c, 0x4a, 0x06, 0xc0, 0xfb, 0x90, 0xc1, 0xfb, 0x00, 0xdf, 0xcf, 0x83, 0x67, 0x10,
	0x5f, 0x8d, 0x6a, 0x4b, 0x54, 0x9d, 0x66, 0xdb, 0xf0, 0xbe, 0xa3, 0xb6, 0xd7, 0xab, 0xa6, 0x65,
	0x1f, 0xff, 0x54, 0x0a, 0xcb, 0x48, 0xf0, 0x55, 0x41, 0x75, 0x13, 0x05, 0x2a, 0xe5, 0x6b, 0x07,
	0xe4, 0x12, 0xcc, 0x6c, 0x82, 0x3a, 0x58, 0xfc, 0x4b, 0x29, 0x2e, 0xca, 0xc0, 0xd7, 0x05, 0x97,
	0x4a, 0x55, 0x8f, 0x94, 0x5f, 0x39, 0x30, 0x1f, 0x28, 0x59, 0x63, 0x4a, 0x3e, 0x8f, 0x2f, 0xf6,
	0x50, 0x32, 0x64, 0xa0, 0x31, 0x5e, 0x27, 0x3b, 0xfb, 0xf8, 0xe7, 0x12, 0x9a, 0x0a, 0x89, 0x34,
	0xb4, 0xaf, 0x0b, 0x06, 0xe7, 0x40, 0x1a, 0x67, 0xd4, 0xb0, 0xc8, 0x17, 0x99, 0xc6, 0xcf, 0xe2,
	0x4a, 0x8e, 0xc6, 0xf8, 0x27, 0x12, 0x2b, 0xb8, 0x10, 0x4b, 0x64, 0x13, 0x35, 0x28, 0x62, 0x89,
	0x6c, 0xb2, 0x14, 0x45, 0xbe, 0xcc, 0xf4, 0x7a, 0x0e, 0xcb, 0xbd, 0xf5, 0x8a, 0x8c, 0xf8, 0xa9,
	0x84, 0x8a, 0xeb, 0xf7, 0xee, 0x51, 0xfb, 0x2d, 0x88, 0xdb, 0xe1, 0x40, 0xda, 0x25, 0x8b, 0x4f,
	0x64, 0x99, 0x69, 0x77, 0x1a, 0x97, 0x7b, 0x6b, 0xc7, 0x3c, 0x31, 0xaa, 0x6b, 0x10, 0xf5, 0xc4,
	0x54, 0xe5, 0x86, 0xb0, 0x27, 0xa6, 0xab, 0x31, 0x72, 0x3d, 0x31, 0x7c, 0xaf, 0x94, 0xf0, 0xc4,
	0x50, 0xca, 0x41, 0x3c, 0x71, 0x20, 0x8d, 0x33, 0xea, 0x47, 0x72, 0x3d, 0x31, 0x7a, 0x13, 0xf6,
	0x99, 0x84, 0x8e, 0xa7, 0x3f, 0xbf, 0x60, 0xa1, 0x9c, 0xa9, 0xc7, 0x77, 0xa0, 0xf2, 0xeb, 0x83,
	0x31, 0x0b, 0x9a, 0x5a, 0x4f, 0xeb, 0xfa, 0xb9, 0x84, 0xa6, 0xb8, 0x2f, 0x2c, 0x62, 0xcf, 0x5b,
	0x79, 0x5f, 0x72, 0xc4, 0x9e, 0xb7, 0x72, 0x3f, 0xf3, 0xe4, 0x06, 0x1e, 0xf7, 0x55, 0x0a, 0xff,
	0x5e, 0x4a, 0x94, 0x8f, 0xe0, 0x57, 0x05, 0xbd, 0xb5, 0xbb, 0xe0, 0xa5, 0x7c, 0x63, 0x10, 0x56,
	0xc1, 0x1c, 0x51, 0x8f, 0x79, 0x22, 0x77, 0xff, 0xb5, 0x84, 0x8e, 0x71, 0xb2, 0xa8, 0xc7, 0xbf,
	0x2a, 0xe8, 0xb9, 0x83, 0x6a, 0x9f, 0x5d, 0x82, 0x93, 0x6b, 0x70, 0x4e, 0x7b, 0xfc, 0x85, 0xd4,
	0x55, 0xd5, 0x21, 0x9c, 0x4d, 0x65, 0xd7, 0xa4, 0x08, 0x67, 0x53, 0x3d, 0xea, 0x4c, 0xe4, 0xeb,
	0x4c, 0xfd, 0x97, 0x71, 0xb5, 0x87, 0xfa, 0x56, 0x92, 0x2f, 0xda, 0x80, 0x3f, 0x4a, 0x08, 0xa7,
	0x64, 0xd2, 0x4d, 0x10, 0xcd, 0x4e, 0x0f, 0x83, 0xa6, 0x77, 0xd5, 0x8c, 0x5c, 0x65, 0x68, 0x2e,
	0xe1, 0x0b, 0x62, 0x68, 0x68, 0x36, 0x34, 0xca, 0xf2, 0x5c, 0xd1, 0x3b, 0x8e, 0xcf, 0xc4, 0xaf,
	0x1c, 0x88, 0x47, 0xf0, 0xf9, 0x4e, 0x87, 0x47, 0x08, 0x66, 0xe4, 0x1f, 0x4b, 0x68, 0x3c, 0x7c,
	0x6a, 0x10, 0xbd, 0xe7, 0x0e, 0xac, 0x61, 0xaa, 0x60, 0x45, 0x3e, 0xc7, 0x34, 0x3c, 0x83, 0x9f,
	0xe9, 0xa3, 0x61, 0x10, 0x7f, 0x81, 0x66, 0x50, 0x19, 0x22, 0x1e, 0x7f, 0x5d, 0xb5, 0x26, 0xe2,
	0xf1, 0xd7, 0x5d, 0x88, 0x92, 0x1f, 0x7f, 0x31, 0x0f, 0x3b, 0xf0, 0xf8, 0xf2, 0x07, 0xd1, 0x03,
	0xaf, 0xbb, 0xde, 0x43, 0xf8, 0xc0, 0xcb, 0xa8, 0xe1, 0xc8, 0x3d, 0xf0, 0xec, 0x98, 0x27, 0x71,
	0xe0, 0x71, 0xb2, 0x0e, 0x72, 0xe0, 0x0d, 0xaa, 0x7d, 0x76, 0x05, 0x4a, 0xae, 0xc1, 0x39, 0xed,
	0xf1, 0x6f, 0x25, 0x74, 0x2c, 0x59, 0xf4, 0x21, 0xa6, 0x75, 0x66, 0x19, 0x89, 0x98, 0xd6, 0xd9,
	0x35, 0x26, 0xb9, 0xcf, 0xbd, 0x56, 0x82, 0x6d, 0xf9, 0xed, 0x2f, 0xbe, 0x9e, 0x97, 0xbe, 0xfc,
	0x7a, 0x5e, 0xfa, 0xe7, 0xd7, 0xf3, 0xd2, 0x0f, 0x1e, 0xcf, 0x1f, 0xf9, 0xf2, 0xf1, 0xfc, 0x91,
	0xbf, 0x3f, 0x9e, 0x3f, 0xf2, 0x60, 0xc1, 0x30, 0xfd, 0xad, 0xd6, 0x46, 0x55, 0x77, 0x1a, 0x99,
	0x4f, 0x68, 0x3b, 0xbc, 0x54, 0x7f, 0xb7, 0x49, 0xbc, 0x8d, 0x22, 0xbb, 0x74, 0xaf, 0xfc, 0x27,
	0x00, 0x00, 0xff, 0xff, 0xef, 0x8a, 0x18, 0x85, 0xf8, 0x38, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	ZEVMGetTransactionReceipt(ctx context.Context, in *QueryZEVMGetTransactionReceiptRequest, opts ...grpc.CallOption) (*QueryZEVMGetTransactionReceiptResponse, error)
	ZEVMGetTransaction(ctx context.Context, in *QueryZEVMGetTransactionRequest, opts ...grpc.CallOption) (*QueryZEVMGetTransactionResponse, error)
	ZEVMGetBlock(ctx context.Context, in *QueryZEVMGetBlockByNumberRequest, opts ...grpc.CallOption) (*QueryZEVMGetBlockByNumberResponse, error)
	// Queries a OutTxTracker by index.
	OutTxTracker(ctx context.Context, in *QueryGetOutTxTrackerRequest, opts ...grpc.CallOption) (*QueryGetOutTxTrackerResponse, error)
	// Queries a list of OutTxTracker items.
	OutTxTrackerAll(ctx context.Context, in *QueryAllOutTxTrackerRequest, opts ...grpc.CallOption) (*QueryAllOutTxTrackerResponse, error)
	OutTxTrackerAllByChain(ctx context.Context, in *QueryAllOutTxTrackerByChainRequest, opts ...grpc.CallOption) (*QueryAllOutTxTrackerByChainResponse, error)
	// Queries a InTxHashToCctx by index.
	InTxHashToCctx(ctx context.Context, in *QueryGetInTxHashToCctxRequest, opts ...grpc.CallOption) (*QueryGetInTxHashToCctxResponse, error)
	// Queries a list of InTxHashToCctx items.
	InTxHashToCctxAll(ctx context.Context, in *QueryAllInTxHashToCctxRequest, opts ...grpc.CallOption) (*QueryAllInTxHashToCctxResponse, error)
	// Queries a PermissionFlags by index.
	PermissionFlags(ctx context.Context, in *QueryGetPermissionFlagsRequest, opts ...grpc.CallOption) (*QueryGetPermissionFlagsResponse, error)
	// Queries a list of GetValidatorConsAddress items.
	GetValidatorConsAddress(ctx context.Context, in *QueryGetValidatorConsAddressRequest, opts ...grpc.CallOption) (*QueryGetValidatorConsAddressResponse, error)
	// Queries a keygen by index.
	Keygen(ctx context.Context, in *QueryGetKeygenRequest, opts ...grpc.CallOption) (*QueryGetKeygenResponse, error)
	// Queries a tSSVoter by index.
	TSSVoter(ctx context.Context, in *QueryGetTSSVoterRequest, opts ...grpc.CallOption) (*QueryGetTSSVoterResponse, error)
	// Queries a list of tSSVoter items.
	TSSVoterAll(ctx context.Context, in *QueryAllTSSVoterRequest, opts ...grpc.CallOption) (*QueryAllTSSVoterResponse, error)
	// Queries a tSS by index.
	TSS(ctx context.Context, in *QueryGetTSSRequest, opts ...grpc.CallOption) (*QueryGetTSSResponse, error)
	// Queries a list of tSS items.
	TSSAll(ctx context.Context, in *QueryAllTSSRequest, opts ...grpc.CallOption) (*QueryAllTSSResponse, error)
	// Queries a gasPrice by index.
	GasPrice(ctx context.Context, in *QueryGetGasPriceRequest, opts ...grpc.CallOption) (*QueryGetGasPriceResponse, error)
	// Queries a list of gasPrice items.
	GasPriceAll(ctx context.Context, in *QueryAllGasPriceRequest, opts ...grpc.CallOption) (*QueryAllGasPriceResponse, error)
	ConvertGasToZeta(ctx context.Context, in *QueryConvertGasToZetaRequest, opts ...grpc.CallOption) (*QueryConvertGasToZetaResponse, error)
	ProtocolFee(ctx context.Context, in *QueryMessagePassingProtocolFeeRequest, opts ...grpc.CallOption) (*QueryMessagePassingProtocolFeeResponse, error)
	// Queries a chainNonces by index.
	ChainNonces(ctx context.Context, in *QueryGetChainNoncesRequest, opts ...grpc.CallOption) (*QueryGetChainNoncesResponse, error)
	// Queries a list of chainNonces items.
	ChainNoncesAll(ctx context.Context, in *QueryAllChainNoncesRequest, opts ...grpc.CallOption) (*QueryAllChainNoncesResponse, error)
	// Queries a lastBlockHeight by index.
	LastBlockHeight(ctx context.Context, in *QueryGetLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryGetLastBlockHeightResponse, error)
	// Queries a list of lastBlockHeight items.
	LastBlockHeightAll(ctx context.Context, in *QueryAllLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryAllLastBlockHeightResponse, error)
	// Queries a send by index.
	Cctx(ctx context.Context, in *QueryGetCctxRequest, opts ...grpc.CallOption) (*QueryGetCctxResponse, error)
	// Queries a list of send items.
	CctxAll(ctx context.Context, in *QueryAllCctxRequest, opts ...grpc.CallOption) (*QueryAllCctxResponse, error)
	// Queries a list of send items.
	CctxAllPending(ctx context.Context, in *QueryAllCctxPendingRequest, opts ...grpc.CallOption) (*QueryAllCctxPendingResponse, error)
	// Queries a nodeAccount by index.
	NodeAccount(ctx context.Context, in *QueryGetNodeAccountRequest, opts ...grpc.CallOption) (*QueryGetNodeAccountResponse, error)
	// Queries a list of nodeAccount items.
	NodeAccountAll(ctx context.Context, in *QueryAllNodeAccountRequest, opts ...grpc.CallOption) (*QueryAllNodeAccountResponse, error)
	// Queries a list of lastMetaHeight items.
	LastZetaHeight(ctx context.Context, in *QueryLastZetaHeightRequest, opts ...grpc.CallOption) (*QueryLastZetaHeightResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ZEVMGetTransactionReceipt(ctx context.Context, in *QueryZEVMGetTransactionReceiptRequest, opts ...grpc.CallOption) (*QueryZEVMGetTransactionReceiptResponse, error) {
	out := new(QueryZEVMGetTransactionReceiptResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ZEVMGetTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ZEVMGetTransaction(ctx context.Context, in *QueryZEVMGetTransactionRequest, opts ...grpc.CallOption) (*QueryZEVMGetTransactionResponse, error) {
	out := new(QueryZEVMGetTransactionResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ZEVMGetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ZEVMGetBlock(ctx context.Context, in *QueryZEVMGetBlockByNumberRequest, opts ...grpc.CallOption) (*QueryZEVMGetBlockByNumberResponse, error) {
	out := new(QueryZEVMGetBlockByNumberResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ZEVMGetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutTxTracker(ctx context.Context, in *QueryGetOutTxTrackerRequest, opts ...grpc.CallOption) (*QueryGetOutTxTrackerResponse, error) {
	out := new(QueryGetOutTxTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/OutTxTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutTxTrackerAll(ctx context.Context, in *QueryAllOutTxTrackerRequest, opts ...grpc.CallOption) (*QueryAllOutTxTrackerResponse, error) {
	out := new(QueryAllOutTxTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/OutTxTrackerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutTxTrackerAllByChain(ctx context.Context, in *QueryAllOutTxTrackerByChainRequest, opts ...grpc.CallOption) (*QueryAllOutTxTrackerByChainResponse, error) {
	out := new(QueryAllOutTxTrackerByChainResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/OutTxTrackerAllByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxHashToCctx(ctx context.Context, in *QueryGetInTxHashToCctxRequest, opts ...grpc.CallOption) (*QueryGetInTxHashToCctxResponse, error) {
	out := new(QueryGetInTxHashToCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InTxHashToCctx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxHashToCctxAll(ctx context.Context, in *QueryAllInTxHashToCctxRequest, opts ...grpc.CallOption) (*QueryAllInTxHashToCctxResponse, error) {
	out := new(QueryAllInTxHashToCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InTxHashToCctxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PermissionFlags(ctx context.Context, in *QueryGetPermissionFlagsRequest, opts ...grpc.CallOption) (*QueryGetPermissionFlagsResponse, error) {
	out := new(QueryGetPermissionFlagsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/PermissionFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValidatorConsAddress(ctx context.Context, in *QueryGetValidatorConsAddressRequest, opts ...grpc.CallOption) (*QueryGetValidatorConsAddressResponse, error) {
	out := new(QueryGetValidatorConsAddressResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/GetValidatorConsAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keygen(ctx context.Context, in *QueryGetKeygenRequest, opts ...grpc.CallOption) (*QueryGetKeygenResponse, error) {
	out := new(QueryGetKeygenResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/Keygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TSSVoter(ctx context.Context, in *QueryGetTSSVoterRequest, opts ...grpc.CallOption) (*QueryGetTSSVoterResponse, error) {
	out := new(QueryGetTSSVoterResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/TSSVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TSSVoterAll(ctx context.Context, in *QueryAllTSSVoterRequest, opts ...grpc.CallOption) (*QueryAllTSSVoterResponse, error) {
	out := new(QueryAllTSSVoterResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/TSSVoterAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TSS(ctx context.Context, in *QueryGetTSSRequest, opts ...grpc.CallOption) (*QueryGetTSSResponse, error) {
	out := new(QueryGetTSSResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/TSS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TSSAll(ctx context.Context, in *QueryAllTSSRequest, opts ...grpc.CallOption) (*QueryAllTSSResponse, error) {
	out := new(QueryAllTSSResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/TSSAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPrice(ctx context.Context, in *QueryGetGasPriceRequest, opts ...grpc.CallOption) (*QueryGetGasPriceResponse, error) {
	out := new(QueryGetGasPriceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPriceAll(ctx context.Context, in *QueryAllGasPriceRequest, opts ...grpc.CallOption) (*QueryAllGasPriceResponse, error) {
	out := new(QueryAllGasPriceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/GasPriceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConvertGasToZeta(ctx context.Context, in *QueryConvertGasToZetaRequest, opts ...grpc.CallOption) (*QueryConvertGasToZetaResponse, error) {
	out := new(QueryConvertGasToZetaResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ConvertGasToZeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProtocolFee(ctx context.Context, in *QueryMessagePassingProtocolFeeRequest, opts ...grpc.CallOption) (*QueryMessagePassingProtocolFeeResponse, error) {
	out := new(QueryMessagePassingProtocolFeeResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ProtocolFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainNonces(ctx context.Context, in *QueryGetChainNoncesRequest, opts ...grpc.CallOption) (*QueryGetChainNoncesResponse, error) {
	out := new(QueryGetChainNoncesResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ChainNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainNoncesAll(ctx context.Context, in *QueryAllChainNoncesRequest, opts ...grpc.CallOption) (*QueryAllChainNoncesResponse, error) {
	out := new(QueryAllChainNoncesResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ChainNoncesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBlockHeight(ctx context.Context, in *QueryGetLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryGetLastBlockHeightResponse, error) {
	out := new(QueryGetLastBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/LastBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBlockHeightAll(ctx context.Context, in *QueryAllLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryAllLastBlockHeightResponse, error) {
	out := new(QueryAllLastBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/LastBlockHeightAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Cctx(ctx context.Context, in *QueryGetCctxRequest, opts ...grpc.CallOption) (*QueryGetCctxResponse, error) {
	out := new(QueryGetCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/Cctx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CctxAll(ctx context.Context, in *QueryAllCctxRequest, opts ...grpc.CallOption) (*QueryAllCctxResponse, error) {
	out := new(QueryAllCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/CctxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CctxAllPending(ctx context.Context, in *QueryAllCctxPendingRequest, opts ...grpc.CallOption) (*QueryAllCctxPendingResponse, error) {
	out := new(QueryAllCctxPendingResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/CctxAllPending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAccount(ctx context.Context, in *QueryGetNodeAccountRequest, opts ...grpc.CallOption) (*QueryGetNodeAccountResponse, error) {
	out := new(QueryGetNodeAccountResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/NodeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAccountAll(ctx context.Context, in *QueryAllNodeAccountRequest, opts ...grpc.CallOption) (*QueryAllNodeAccountResponse, error) {
	out := new(QueryAllNodeAccountResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/NodeAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastZetaHeight(ctx context.Context, in *QueryLastZetaHeightRequest, opts ...grpc.CallOption) (*QueryLastZetaHeightResponse, error) {
	out := new(QueryLastZetaHeightResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/LastZetaHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	ZEVMGetTransactionReceipt(context.Context, *QueryZEVMGetTransactionReceiptRequest) (*QueryZEVMGetTransactionReceiptResponse, error)
	ZEVMGetTransaction(context.Context, *QueryZEVMGetTransactionRequest) (*QueryZEVMGetTransactionResponse, error)
	ZEVMGetBlock(context.Context, *QueryZEVMGetBlockByNumberRequest) (*QueryZEVMGetBlockByNumberResponse, error)
	// Queries a OutTxTracker by index.
	OutTxTracker(context.Context, *QueryGetOutTxTrackerRequest) (*QueryGetOutTxTrackerResponse, error)
	// Queries a list of OutTxTracker items.
	OutTxTrackerAll(context.Context, *QueryAllOutTxTrackerRequest) (*QueryAllOutTxTrackerResponse, error)
	OutTxTrackerAllByChain(context.Context, *QueryAllOutTxTrackerByChainRequest) (*QueryAllOutTxTrackerByChainResponse, error)
	// Queries a InTxHashToCctx by index.
	InTxHashToCctx(context.Context, *QueryGetInTxHashToCctxRequest) (*QueryGetInTxHashToCctxResponse, error)
	// Queries a list of InTxHashToCctx items.
	InTxHashToCctxAll(context.Context, *QueryAllInTxHashToCctxRequest) (*QueryAllInTxHashToCctxResponse, error)
	// Queries a PermissionFlags by index.
	PermissionFlags(context.Context, *QueryGetPermissionFlagsRequest) (*QueryGetPermissionFlagsResponse, error)
	// Queries a list of GetValidatorConsAddress items.
	GetValidatorConsAddress(context.Context, *QueryGetValidatorConsAddressRequest) (*QueryGetValidatorConsAddressResponse, error)
	// Queries a keygen by index.
	Keygen(context.Context, *QueryGetKeygenRequest) (*QueryGetKeygenResponse, error)
	// Queries a tSSVoter by index.
	TSSVoter(context.Context, *QueryGetTSSVoterRequest) (*QueryGetTSSVoterResponse, error)
	// Queries a list of tSSVoter items.
	TSSVoterAll(context.Context, *QueryAllTSSVoterRequest) (*QueryAllTSSVoterResponse, error)
	// Queries a tSS by index.
	TSS(context.Context, *QueryGetTSSRequest) (*QueryGetTSSResponse, error)
	// Queries a list of tSS items.
	TSSAll(context.Context, *QueryAllTSSRequest) (*QueryAllTSSResponse, error)
	// Queries a gasPrice by index.
	GasPrice(context.Context, *QueryGetGasPriceRequest) (*QueryGetGasPriceResponse, error)
	// Queries a list of gasPrice items.
	GasPriceAll(context.Context, *QueryAllGasPriceRequest) (*QueryAllGasPriceResponse, error)
	ConvertGasToZeta(context.Context, *QueryConvertGasToZetaRequest) (*QueryConvertGasToZetaResponse, error)
	ProtocolFee(context.Context, *QueryMessagePassingProtocolFeeRequest) (*QueryMessagePassingProtocolFeeResponse, error)
	// Queries a chainNonces by index.
	ChainNonces(context.Context, *QueryGetChainNoncesRequest) (*QueryGetChainNoncesResponse, error)
	// Queries a list of chainNonces items.
	ChainNoncesAll(context.Context, *QueryAllChainNoncesRequest) (*QueryAllChainNoncesResponse, error)
	// Queries a lastBlockHeight by index.
	LastBlockHeight(context.Context, *QueryGetLastBlockHeightRequest) (*QueryGetLastBlockHeightResponse, error)
	// Queries a list of lastBlockHeight items.
	LastBlockHeightAll(context.Context, *QueryAllLastBlockHeightRequest) (*QueryAllLastBlockHeightResponse, error)
	// Queries a send by index.
	Cctx(context.Context, *QueryGetCctxRequest) (*QueryGetCctxResponse, error)
	// Queries a list of send items.
	CctxAll(context.Context, *QueryAllCctxRequest) (*QueryAllCctxResponse, error)
	// Queries a list of send items.
	CctxAllPending(context.Context, *QueryAllCctxPendingRequest) (*QueryAllCctxPendingResponse, error)
	// Queries a nodeAccount by index.
	NodeAccount(context.Context, *QueryGetNodeAccountRequest) (*QueryGetNodeAccountResponse, error)
	// Queries a list of nodeAccount items.
	NodeAccountAll(context.Context, *QueryAllNodeAccountRequest) (*QueryAllNodeAccountResponse, error)
	// Queries a list of lastMetaHeight items.
	LastZetaHeight(context.Context, *QueryLastZetaHeightRequest) (*QueryLastZetaHeightResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ZEVMGetTransactionReceipt(ctx context.Context, req *QueryZEVMGetTransactionReceiptRequest) (*QueryZEVMGetTransactionReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZEVMGetTransactionReceipt not implemented")
}
func (*UnimplementedQueryServer) ZEVMGetTransaction(ctx context.Context, req *QueryZEVMGetTransactionRequest) (*QueryZEVMGetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZEVMGetTransaction not implemented")
}
func (*UnimplementedQueryServer) ZEVMGetBlock(ctx context.Context, req *QueryZEVMGetBlockByNumberRequest) (*QueryZEVMGetBlockByNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZEVMGetBlock not implemented")
}
func (*UnimplementedQueryServer) OutTxTracker(ctx context.Context, req *QueryGetOutTxTrackerRequest) (*QueryGetOutTxTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutTxTracker not implemented")
}
func (*UnimplementedQueryServer) OutTxTrackerAll(ctx context.Context, req *QueryAllOutTxTrackerRequest) (*QueryAllOutTxTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutTxTrackerAll not implemented")
}
func (*UnimplementedQueryServer) OutTxTrackerAllByChain(ctx context.Context, req *QueryAllOutTxTrackerByChainRequest) (*QueryAllOutTxTrackerByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutTxTrackerAllByChain not implemented")
}
func (*UnimplementedQueryServer) InTxHashToCctx(ctx context.Context, req *QueryGetInTxHashToCctxRequest) (*QueryGetInTxHashToCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxHashToCctx not implemented")
}
func (*UnimplementedQueryServer) InTxHashToCctxAll(ctx context.Context, req *QueryAllInTxHashToCctxRequest) (*QueryAllInTxHashToCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxHashToCctxAll not implemented")
}
func (*UnimplementedQueryServer) PermissionFlags(ctx context.Context, req *QueryGetPermissionFlagsRequest) (*QueryGetPermissionFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionFlags not implemented")
}
func (*UnimplementedQueryServer) GetValidatorConsAddress(ctx context.Context, req *QueryGetValidatorConsAddressRequest) (*QueryGetValidatorConsAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorConsAddress not implemented")
}
func (*UnimplementedQueryServer) Keygen(ctx context.Context, req *QueryGetKeygenRequest) (*QueryGetKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keygen not implemented")
}
func (*UnimplementedQueryServer) TSSVoter(ctx context.Context, req *QueryGetTSSVoterRequest) (*QueryGetTSSVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSSVoter not implemented")
}
func (*UnimplementedQueryServer) TSSVoterAll(ctx context.Context, req *QueryAllTSSVoterRequest) (*QueryAllTSSVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSSVoterAll not implemented")
}
func (*UnimplementedQueryServer) TSS(ctx context.Context, req *QueryGetTSSRequest) (*QueryGetTSSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSS not implemented")
}
func (*UnimplementedQueryServer) TSSAll(ctx context.Context, req *QueryAllTSSRequest) (*QueryAllTSSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSSAll not implemented")
}
func (*UnimplementedQueryServer) GasPrice(ctx context.Context, req *QueryGetGasPriceRequest) (*QueryGetGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrice not implemented")
}
func (*UnimplementedQueryServer) GasPriceAll(ctx context.Context, req *QueryAllGasPriceRequest) (*QueryAllGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPriceAll not implemented")
}
func (*UnimplementedQueryServer) ConvertGasToZeta(ctx context.Context, req *QueryConvertGasToZetaRequest) (*QueryConvertGasToZetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertGasToZeta not implemented")
}
func (*UnimplementedQueryServer) ProtocolFee(ctx context.Context, req *QueryMessagePassingProtocolFeeRequest) (*QueryMessagePassingProtocolFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolFee not implemented")
}
func (*UnimplementedQueryServer) ChainNonces(ctx context.Context, req *QueryGetChainNoncesRequest) (*QueryGetChainNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainNonces not implemented")
}
func (*UnimplementedQueryServer) ChainNoncesAll(ctx context.Context, req *QueryAllChainNoncesRequest) (*QueryAllChainNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainNoncesAll not implemented")
}
func (*UnimplementedQueryServer) LastBlockHeight(ctx context.Context, req *QueryGetLastBlockHeightRequest) (*QueryGetLastBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlockHeight not implemented")
}
func (*UnimplementedQueryServer) LastBlockHeightAll(ctx context.Context, req *QueryAllLastBlockHeightRequest) (*QueryAllLastBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlockHeightAll not implemented")
}
func (*UnimplementedQueryServer) Cctx(ctx context.Context, req *QueryGetCctxRequest) (*QueryGetCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cctx not implemented")
}
func (*UnimplementedQueryServer) CctxAll(ctx context.Context, req *QueryAllCctxRequest) (*QueryAllCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CctxAll not implemented")
}
func (*UnimplementedQueryServer) CctxAllPending(ctx context.Context, req *QueryAllCctxPendingRequest) (*QueryAllCctxPendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CctxAllPending not implemented")
}
func (*UnimplementedQueryServer) NodeAccount(ctx context.Context, req *QueryGetNodeAccountRequest) (*QueryGetNodeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAccount not implemented")
}
func (*UnimplementedQueryServer) NodeAccountAll(ctx context.Context, req *QueryAllNodeAccountRequest) (*QueryAllNodeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAccountAll not implemented")
}
func (*UnimplementedQueryServer) LastZetaHeight(ctx context.Context, req *QueryLastZetaHeightRequest) (*QueryLastZetaHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastZetaHeight not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ZEVMGetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZEVMGetTransactionReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZEVMGetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ZEVMGetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZEVMGetTransactionReceipt(ctx, req.(*QueryZEVMGetTransactionReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ZEVMGetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZEVMGetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZEVMGetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ZEVMGetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZEVMGetTransaction(ctx, req.(*QueryZEVMGetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ZEVMGetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZEVMGetBlockByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZEVMGetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ZEVMGetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZEVMGetBlock(ctx, req.(*QueryZEVMGetBlockByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutTxTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOutTxTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutTxTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/OutTxTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutTxTracker(ctx, req.(*QueryGetOutTxTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutTxTrackerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutTxTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutTxTrackerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/OutTxTrackerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutTxTrackerAll(ctx, req.(*QueryAllOutTxTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutTxTrackerAllByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutTxTrackerByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutTxTrackerAllByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/OutTxTrackerAllByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutTxTrackerAllByChain(ctx, req.(*QueryAllOutTxTrackerByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxHashToCctx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInTxHashToCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxHashToCctx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InTxHashToCctx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxHashToCctx(ctx, req.(*QueryGetInTxHashToCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxHashToCctxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInTxHashToCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxHashToCctxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InTxHashToCctxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxHashToCctxAll(ctx, req.(*QueryAllInTxHashToCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PermissionFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPermissionFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PermissionFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/PermissionFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PermissionFlags(ctx, req.(*QueryGetPermissionFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValidatorConsAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorConsAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValidatorConsAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/GetValidatorConsAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValidatorConsAddress(ctx, req.(*QueryGetValidatorConsAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/Keygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keygen(ctx, req.(*QueryGetKeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TSSVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTSSVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TSSVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/TSSVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TSSVoter(ctx, req.(*QueryGetTSSVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TSSVoterAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTSSVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TSSVoterAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/TSSVoterAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TSSVoterAll(ctx, req.(*QueryAllTSSVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TSS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTSSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TSS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/TSS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TSS(ctx, req.(*QueryGetTSSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TSSAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTSSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TSSAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/TSSAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TSSAll(ctx, req.(*QueryAllTSSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPrice(ctx, req.(*QueryGetGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPriceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPriceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/GasPriceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPriceAll(ctx, req.(*QueryAllGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConvertGasToZeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConvertGasToZetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConvertGasToZeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ConvertGasToZeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConvertGasToZeta(ctx, req.(*QueryConvertGasToZetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProtocolFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMessagePassingProtocolFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProtocolFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ProtocolFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProtocolFee(ctx, req.(*QueryMessagePassingProtocolFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ChainNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainNonces(ctx, req.(*QueryGetChainNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainNoncesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChainNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainNoncesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ChainNoncesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainNoncesAll(ctx, req.(*QueryAllChainNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/LastBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBlockHeight(ctx, req.(*QueryGetLastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBlockHeightAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBlockHeightAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/LastBlockHeightAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBlockHeightAll(ctx, req.(*QueryAllLastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Cctx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Cctx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/Cctx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Cctx(ctx, req.(*QueryGetCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CctxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CctxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/CctxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CctxAll(ctx, req.(*QueryAllCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CctxAllPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCctxPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CctxAllPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/CctxAllPending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CctxAllPending(ctx, req.(*QueryAllCctxPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/NodeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAccount(ctx, req.(*QueryGetNodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/NodeAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAccountAll(ctx, req.(*QueryAllNodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastZetaHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastZetaHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastZetaHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/LastZetaHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastZetaHeight(ctx, req.(*QueryLastZetaHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.crosschain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ZEVMGetTransactionReceipt",
			Handler:    _Query_ZEVMGetTransactionReceipt_Handler,
		},
		{
			MethodName: "ZEVMGetTransaction",
			Handler:    _Query_ZEVMGetTransaction_Handler,
		},
		{
			MethodName: "ZEVMGetBlock",
			Handler:    _Query_ZEVMGetBlock_Handler,
		},
		{
			MethodName: "OutTxTracker",
			Handler:    _Query_OutTxTracker_Handler,
		},
		{
			MethodName: "OutTxTrackerAll",
			Handler:    _Query_OutTxTrackerAll_Handler,
		},
		{
			MethodName: "OutTxTrackerAllByChain",
			Handler:    _Query_OutTxTrackerAllByChain_Handler,
		},
		{
			MethodName: "InTxHashToCctx",
			Handler:    _Query_InTxHashToCctx_Handler,
		},
		{
			MethodName: "InTxHashToCctxAll",
			Handler:    _Query_InTxHashToCctxAll_Handler,
		},
		{
			MethodName: "PermissionFlags",
			Handler:    _Query_PermissionFlags_Handler,
		},
		{
			MethodName: "GetValidatorConsAddress",
			Handler:    _Query_GetValidatorConsAddress_Handler,
		},
		{
			MethodName: "Keygen",
			Handler:    _Query_Keygen_Handler,
		},
		{
			MethodName: "TSSVoter",
			Handler:    _Query_TSSVoter_Handler,
		},
		{
			MethodName: "TSSVoterAll",
			Handler:    _Query_TSSVoterAll_Handler,
		},
		{
			MethodName: "TSS",
			Handler:    _Query_TSS_Handler,
		},
		{
			MethodName: "TSSAll",
			Handler:    _Query_TSSAll_Handler,
		},
		{
			MethodName: "GasPrice",
			Handler:    _Query_GasPrice_Handler,
		},
		{
			MethodName: "GasPriceAll",
			Handler:    _Query_GasPriceAll_Handler,
		},
		{
			MethodName: "ConvertGasToZeta",
			Handler:    _Query_ConvertGasToZeta_Handler,
		},
		{
			MethodName: "ProtocolFee",
			Handler:    _Query_ProtocolFee_Handler,
		},
		{
			MethodName: "ChainNonces",
			Handler:    _Query_ChainNonces_Handler,
		},
		{
			MethodName: "ChainNoncesAll",
			Handler:    _Query_ChainNoncesAll_Handler,
		},
		{
			MethodName: "LastBlockHeight",
			Handler:    _Query_LastBlockHeight_Handler,
		},
		{
			MethodName: "LastBlockHeightAll",
			Handler:    _Query_LastBlockHeightAll_Handler,
		},
		{
			MethodName: "Cctx",
			Handler:    _Query_Cctx_Handler,
		},
		{
			MethodName: "CctxAll",
			Handler:    _Query_CctxAll_Handler,
		},
		{
			MethodName: "CctxAllPending",
			Handler:    _Query_CctxAllPending_Handler,
		},
		{
			MethodName: "NodeAccount",
			Handler:    _Query_NodeAccount_Handler,
		},
		{
			MethodName: "NodeAccountAll",
			Handler:    _Query_NodeAccountAll_Handler,
		},
		{
			MethodName: "LastZetaHeight",
			Handler:    _Query_LastZetaHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crosschain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetOutTxTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutTxTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutTxTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutTxTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutTxTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutTxTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutTxTracker.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOutTxTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutTxTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutTxTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutTxTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutTxTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutTxTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutTxTracker) > 0 {
		for iNdEx := len(m.OutTxTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutTxTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutTxTrackerByChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutTxTrackerByChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutTxTrackerByChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutTxTrackerByChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutTxTrackerByChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutTxTrackerByChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutTxTracker) > 0 {
		for iNdEx := len(m.OutTxTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutTxTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInTxHashToCctxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInTxHashToCctxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInTxHashToCctxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInTxHashToCctxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInTxHashToCctxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInTxHashToCctxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InTxHashToCctx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInTxHashToCctxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInTxHashToCctxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInTxHashToCctxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInTxHashToCctxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInTxHashToCctxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInTxHashToCctxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InTxHashToCctx) > 0 {
		for iNdEx := len(m.InTxHashToCctx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InTxHashToCctx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPermissionFlagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPermissionFlagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPermissionFlagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPermissionFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPermissionFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPermissionFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PermissionFlags.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorConsAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorConsAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorConsAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorOperatorAddress) > 0 {
		i -= len(m.ValidatorOperatorAddress)
		copy(dAtA[i:], m.ValidatorOperatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorOperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorConsAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorConsAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorConsAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorConsAddress) > 0 {
		i -= len(m.ValidatorConsAddress)
		copy(dAtA[i:], m.ValidatorConsAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorConsAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKeygenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeygenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeygenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetKeygenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeygenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeygenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Keygen != nil {
		{
			size, err := m.Keygen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TSSVoter != nil {
		{
			size, err := m.TSSVoter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTSSVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTSSVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTSSVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTSSVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTSSVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTSSVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TSSVoter) > 0 {
		for iNdEx := len(m.TSSVoter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TSSVoter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TSS != nil {
		{
			size, err := m.TSS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTSSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTSSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTSSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTSSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTSSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTSSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TSS) > 0 {
		for iNdEx := len(m.TSS) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TSS[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasPrice != nil {
		{
			size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GasPrice) > 0 {
		for iNdEx := len(m.GasPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainNonces != nil {
		{
			size, err := m.ChainNonces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChainNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChainNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainNonces) > 0 {
		for iNdEx := len(m.ChainNonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainNonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastBlockHeight != nil {
		{
			size, err := m.LastBlockHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLastBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLastBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLastBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLastBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLastBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLastBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LastBlockHeight) > 0 {
		for iNdEx := len(m.LastBlockHeight) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastBlockHeight[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCctxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCctxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCctxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCctxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCctxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCctxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrossChainTx != nil {
		{
			size, err := m.CrossChainTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCctxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCctxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCctxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCctxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCctxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCctxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrossChainTx) > 0 {
		for iNdEx := len(m.CrossChainTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCctxPendingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCctxPendingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCctxPendingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllCctxPendingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCctxPendingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCctxPendingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrossChainTx) > 0 {
		for iNdEx := len(m.CrossChainTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeAccount != nil {
		{
			size, err := m.NodeAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeAccount) > 0 {
		for iNdEx := len(m.NodeAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastZetaHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastZetaHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastZetaHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastZetaHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastZetaHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastZetaHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryConvertGasToZetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConvertGasToZetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConvertGasToZetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConvertGasToZetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConvertGasToZetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConvertGasToZetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZetaBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ZetaBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProtocolFeeInZeta) > 0 {
		i -= len(m.ProtocolFeeInZeta)
		copy(dAtA[i:], m.ProtocolFeeInZeta)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProtocolFeeInZeta)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutboundGasInZeta) > 0 {
		i -= len(m.OutboundGasInZeta)
		copy(dAtA[i:], m.OutboundGasInZeta)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OutboundGasInZeta)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMessagePassingProtocolFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessagePassingProtocolFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessagePassingProtocolFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMessagePassingProtocolFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessagePassingProtocolFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessagePassingProtocolFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeInZeta) > 0 {
		i -= len(m.FeeInZeta)
		copy(dAtA[i:], m.FeeInZeta)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeeInZeta)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZEVMGetTransactionReceiptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZEVMGetTransactionReceiptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZEVMGetTransactionReceiptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZEVMGetTransactionReceiptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZEVMGetTransactionReceiptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZEVMGetTransactionReceiptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.TransactionIndex) > 0 {
		i -= len(m.TransactionIndex)
		copy(dAtA[i:], m.TransactionIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TransactionIndex)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LogsBloom) > 0 {
		i -= len(m.LogsBloom)
		copy(dAtA[i:], m.LogsBloom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LogsBloom)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GasUsed) > 0 {
		i -= len(m.GasUsed)
		copy(dAtA[i:], m.GasUsed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GasUsed)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CumulativeGasUsed) > 0 {
		i -= len(m.CumulativeGasUsed)
		copy(dAtA[i:], m.CumulativeGasUsed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CumulativeGasUsed)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BlockNumber) > 0 {
		i -= len(m.BlockNumber)
		copy(dAtA[i:], m.BlockNumber)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockNumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Log) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removed {
		i--
		if m.Removed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.LogIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TransactionIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TransactionIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZEVMGetTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZEVMGetTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZEVMGetTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZEVMGetTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZEVMGetTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZEVMGetTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.V) > 0 {
		i -= len(m.V)
		copy(dAtA[i:], m.V)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.V)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.AccessList) > 0 {
		for iNdEx := len(m.AccessList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AccessList[iNdEx])
			copy(dAtA[i:], m.AccessList[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.AccessList[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TransactionIndex) > 0 {
		i -= len(m.TransactionIndex)
		copy(dAtA[i:], m.TransactionIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TransactionIndex)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GasPrice) > 0 {
		i -= len(m.GasPrice)
		copy(dAtA[i:], m.GasPrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GasPrice)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Gas) > 0 {
		i -= len(m.Gas)
		copy(dAtA[i:], m.Gas)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Gas)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BlockNumber) > 0 {
		i -= len(m.BlockNumber)
		copy(dAtA[i:], m.BlockNumber)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockNumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZEVMGetBlockByNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZEVMGetBlockByNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZEVMGetBlockByNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryZEVMGetBlockByNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZEVMGetBlockByNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZEVMGetBlockByNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MixHash) > 0 {
		i -= len(m.MixHash)
		copy(dAtA[i:], m.MixHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MixHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.BaseFeePerGas) > 0 {
		i -= len(m.BaseFeePerGas)
		copy(dAtA[i:], m.BaseFeePerGas)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseFeePerGas)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Uncles) > 0 {
		for iNdEx := len(m.Uncles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Uncles[iNdEx])
			copy(dAtA[i:], m.Uncles[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Uncles[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transactions[iNdEx])
			copy(dAtA[i:], m.Transactions[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Transactions[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.GasUsed) > 0 {
		i -= len(m.GasUsed)
		copy(dAtA[i:], m.GasUsed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GasUsed)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Size_) > 0 {
		i -= len(m.Size_)
		copy(dAtA[i:], m.Size_)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Size_)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TotalDifficulty) > 0 {
		i -= len(m.TotalDifficulty)
		copy(dAtA[i:], m.TotalDifficulty)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalDifficulty)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Difficulty) > 0 {
		i -= len(m.Difficulty)
		copy(dAtA[i:], m.Difficulty)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Difficulty)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Miner) > 0 {
		i -= len(m.Miner)
		copy(dAtA[i:], m.Miner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Miner)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ReceiptsRoot) > 0 {
		i -= len(m.ReceiptsRoot)
		copy(dAtA[i:], m.ReceiptsRoot)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReceiptsRoot)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TransactionsRoot) > 0 {
		i -= len(m.TransactionsRoot)
		copy(dAtA[i:], m.TransactionsRoot)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TransactionsRoot)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LogsBloom) > 0 {
		i -= len(m.LogsBloom)
		copy(dAtA[i:], m.LogsBloom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LogsBloom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sha3Uncles) > 0 {
		i -= len(m.Sha3Uncles)
		copy(dAtA[i:], m.Sha3Uncles)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sha3Uncles)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParentHash) > 0 {
		i -= len(m.ParentHash)
		copy(dAtA[i:], m.ParentHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ParentHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetOutTxTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainID != 0 {
		n += 1 + sovQuery(uint64(m.ChainID))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryGetOutTxTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OutTxTracker.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOutTxTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutTxTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutTxTracker) > 0 {
		for _, e := range m.OutTxTracker {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutTxTrackerByChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != 0 {
		n += 1 + sovQuery(uint64(m.Chain))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutTxTrackerByChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutTxTracker) > 0 {
		for _, e := range m.OutTxTracker {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInTxHashToCctxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInTxHashToCctxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InTxHashToCctx.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInTxHashToCctxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInTxHashToCctxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InTxHashToCctx) > 0 {
		for _, e := range m.InTxHashToCctx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPermissionFlagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPermissionFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PermissionFlags.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetValidatorConsAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorOperatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorConsAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorConsAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKeygenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetKeygenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Keygen != nil {
		l = m.Keygen.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTSSVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTSSVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TSSVoter != nil {
		l = m.TSSVoter.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTSSVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTSSVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TSSVoter) > 0 {
		for _, e := range m.TSSVoter {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTSSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTSSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TSS != nil {
		l = m.TSS.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTSSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTSSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TSS) > 0 {
		for _, e := range m.TSS {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasPrice != nil {
		l = m.GasPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasPrice) > 0 {
		for _, e := range m.GasPrice {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainNonces != nil {
		l = m.ChainNonces.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChainNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChainNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainNonces) > 0 {
		for _, e := range m.ChainNonces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastBlockHeight != nil {
		l = m.LastBlockHeight.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLastBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLastBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LastBlockHeight) > 0 {
		for _, e := range m.LastBlockHeight {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCctxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryGetCctxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrossChainTx != nil {
		l = m.CrossChainTx.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCctxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCctxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrossChainTx) > 0 {
		for _, e := range m.CrossChainTx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCctxPendingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllCctxPendingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrossChainTx) > 0 {
		for _, e := range m.CrossChainTx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetNodeAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeAccount != nil {
		l = m.NodeAccount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNodeAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNodeAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAccount) > 0 {
		for _, e := range m.NodeAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastZetaHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastZetaHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryConvertGasToZetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConvertGasToZetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutboundGasInZeta)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ProtocolFeeInZeta)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ZetaBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.ZetaBlockHeight))
	}
	return n
}

func (m *QueryMessagePassingProtocolFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMessagePassingProtocolFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeeInZeta)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryZEVMGetTransactionReceiptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryZEVMGetTransactionReceiptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BlockNumber)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CumulativeGasUsed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GasUsed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LogsBloom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TransactionIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *Log) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovQuery(uint64(m.BlockNumber))
	}
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TransactionIndex != 0 {
		n += 1 + sovQuery(uint64(m.TransactionIndex))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovQuery(uint64(m.LogIndex))
	}
	if m.Removed {
		n += 2
	}
	return n
}

func (m *QueryZEVMGetTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryZEVMGetTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BlockNumber)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Gas)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GasPrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TransactionIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.AccessList) > 0 {
		for _, s := range m.AccessList {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.V)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.R)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryZEVMGetBlockByNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryZEVMGetBlockByNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Sha3Uncles)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LogsBloom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TransactionsRoot)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ReceiptsRoot)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Miner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Difficulty)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalDifficulty)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Size_)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GasUsed)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, s := range m.Transactions {
			l = len(s)
			n += 2 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Uncles) > 0 {
		for _, s := range m.Uncles {
			l = len(s)
			n += 2 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.BaseFeePerGas)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.MixHash)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutTxTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutTxTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutTxTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutTxTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutTxTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutTxTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutTxTracker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutTxTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutTxTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxTracker = append(m.OutTxTracker, OutTxTracker{})
			if err := m.OutTxTracker[len(m.OutTxTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutTxTrackerByChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerByChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerByChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutTxTrackerByChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerByChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutTxTrackerByChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxTracker = append(m.OutTxTracker, OutTxTracker{})
			if err := m.OutTxTracker[len(m.OutTxTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInTxHashToCctxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInTxHashToCctxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInTxHashToCctxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInTxHashToCctxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInTxHashToCctxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInTxHashToCctxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHashToCctx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InTxHashToCctx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInTxHashToCctxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInTxHashToCctxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInTxHashToCctxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInTxHashToCctxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInTxHashToCctxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInTxHashToCctxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHashToCctx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHashToCctx = append(m.InTxHashToCctx, InTxHashToCctx{})
			if err := m.InTxHashToCctx[len(m.InTxHashToCctx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPermissionFlagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPermissionFlagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPermissionFlagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPermissionFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPermissionFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPermissionFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PermissionFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorConsAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorConsAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorConsAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorConsAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorConsAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorConsAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorConsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorConsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeygenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeygenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeygenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeygenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeygenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeygenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keygen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keygen == nil {
				m.Keygen = &Keygen{}
			}
			if err := m.Keygen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSSVoter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TSSVoter == nil {
				m.TSSVoter = &TSSVoter{}
			}
			if err := m.TSSVoter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTSSVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTSSVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTSSVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTSSVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTSSVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTSSVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSSVoter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TSSVoter = append(m.TSSVoter, &TSSVoter{})
			if err := m.TSSVoter[len(m.TSSVoter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TSS == nil {
				m.TSS = &TSS{}
			}
			if err := m.TSS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTSSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTSSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTSSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTSSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTSSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTSSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TSS = append(m.TSS, &TSS{})
			if err := m.TSS[len(m.TSS)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasPrice == nil {
				m.GasPrice = &GasPrice{}
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = append(m.GasPrice, &GasPrice{})
			if err := m.GasPrice[len(m.GasPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainNonces == nil {
				m.ChainNonces = &ChainNonces{}
			}
			if err := m.ChainNonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainNonces = append(m.ChainNonces, &ChainNonces{})
			if err := m.ChainNonces[len(m.ChainNonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastBlockHeight == nil {
				m.LastBlockHeight = &LastBlockHeight{}
			}
			if err := m.LastBlockHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLastBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLastBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBlockHeight = append(m.LastBlockHeight, &LastBlockHeight{})
			if err := m.LastBlockHeight[len(m.LastBlockHeight)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCctxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCctxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCctxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCctxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCctxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCctxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrossChainTx == nil {
				m.CrossChainTx = &CrossChainTx{}
			}
			if err := m.CrossChainTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCctxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCctxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCctxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCctxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCctxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCctxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainTx = append(m.CrossChainTx, &CrossChainTx{})
			if err := m.CrossChainTx[len(m.CrossChainTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCctxPendingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCctxPendingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCctxPendingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCctxPendingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCctxPendingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCctxPendingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainTx = append(m.CrossChainTx, &CrossChainTx{})
			if err := m.CrossChainTx[len(m.CrossChainTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAccount == nil {
				m.NodeAccount = &NodeAccount{}
			}
			if err := m.NodeAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAccount = append(m.NodeAccount, &NodeAccount{})
			if err := m.NodeAccount[len(m.NodeAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastZetaHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastZetaHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastZetaHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastZetaHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastZetaHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastZetaHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConvertGasToZetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConvertGasToZetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConvertGasToZetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConvertGasToZetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConvertGasToZetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConvertGasToZetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundGasInZeta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundGasInZeta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeeInZeta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolFeeInZeta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaBlockHeight", wireType)
			}
			m.ZetaBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZetaBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessagePassingProtocolFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessagePassingProtocolFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessagePassingProtocolFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessagePassingProtocolFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessagePassingProtocolFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessagePassingProtocolFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInZeta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeInZeta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZEVMGetTransactionReceiptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZEVMGetTransactionReceiptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZEVMGetTransactionReceiptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZEVMGetTransactionReceiptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZEVMGetTransactionReceiptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZEVMGetTransactionReceiptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeGasUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeGasUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsBloom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogsBloom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionIndex", wireType)
			}
			m.TransactionIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZEVMGetTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZEVMGetTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZEVMGetTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZEVMGetTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZEVMGetTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZEVMGetTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessList = append(m.AccessList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZEVMGetBlockByNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZEVMGetBlockByNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZEVMGetBlockByNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZEVMGetBlockByNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZEVMGetBlockByNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZEVMGetBlockByNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha3Uncles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha3Uncles = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsBloom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogsBloom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionsRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionsRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptsRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptsRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Miner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Miner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficulty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Difficulty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDifficulty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDifficulty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uncles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uncles = append(m.Uncles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MixHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
