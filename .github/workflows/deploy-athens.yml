name: Athens - Build & Deploy
## TODO - Replace with Cosmovisor when it is ready
on:
  push:
    tags:
      - athens-v*
    branches:
      - athens-v1-develop*
env:
  ENVIRONMENT_NAME: "ATHENS"
  S3_BUCKET_NAME: "zetachain-deployment-files-athens"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_ATHENS }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_ATHENS }}
  AWS_REGION: "us-east-1"
  GITHUB_REF_NAME: "$(echo ${{ github.ref_name }} | tr '//' '-')"
  GOPRIVATE: "github.com/zeta-chain/*"

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: setup-git-credentials
      uses: de-vri-es/setup-git-credentials@v2.0.8
      with:
        credentials: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }} 

    - name: Set Environment Variables"
      run: |
        GITHUB_REF_NAME=${{ github.ref_name }}
        GITHUB_REF_NAME=$(echo $GITHUB_REF_NAME | tr '//' '-')
        echo $GITHUB_REF_NAME
        
        if [[ $GITHUB_REF_NAME == "develop" ]]; then 
          export ENVIRONMENT_NAME=STAGING
          export S3_BUCKET=s3://zetachain-deployment-files-staging
        elif [[ ${GITHUB_REF_NAME:0:8} == "athens-v" ]] || [[ ${GITHUB_REF_NAME:0:8} == "indexer-v" ]] ; then 
          export ENVIRONMENT_NAME=ATHENS  
          export S3_BUCKET=s3://zetachain-deployment-files-athens
        else 
          echo "ERROR: Unknown value for 'github.ref_name' $GITHUB_REF_NAME"
          echo "Exiting"
          exit 1   
        fi

        echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
        echo "ENVIRONMENT_NAME=$ENVIRONMENT_NAME" >> $GITHUB_ENV
        echo "UPDATE_INDEXER=$UPDATE_INDEXER" >> $GITHUB_ENV
        echo "Environment Name:$ENVIRONMENT_NAME"
        echo "GITHUB_REF_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV

    - name: Build
      uses: ./.github/actions/build-binaries
      with:
        run-tests: ${{ env.ENVIRONMENT_NAME != 'STAGING' }}
        build-indexer: true
        go-version: '1.18'

    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update 

    - name: Configure AWS Credentials - Staging
      if: ${{ env.ENVIRONMENT_NAME == 'STAGING' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID_SPARTA }}          
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_SPARTA }}          
        aws-region: ${{ env.AWS_REGION }}

    - name: Configure AWS Credentials - Athens
      if: ${{ env.ENVIRONMENT_NAME == 'ATHENS' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID_ATHENS }}          
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ATHENS }}          
        aws-region: ${{ env.AWS_REGION }}

    - name: Test
      if: ${{ env.ENVIRONMENT_NAME != 'STAGING' }}
      run: go test -v -coverprofile coverage.out  $(go list ./... | grep -v /x/zetacore/)

    - name: Create Package
      run: |
        
        if [[ $ENVIRONMENT_NAME == "STAGING" ]]; then 
          cp deploy/env_variables.staging network_values
        elif [[ $ENVIRONMENT_NAME == "ATHENS" ]]; then 
          cp deploy/env_variables.athens network_values
        fi

        tar -czvf package.tar.gz zetacored zetaclientd indexer deploy/zetaclientd-start.sh deploy/zetacored-start.sh network_values

    - name: Push Files To S3
      run: |
        echo ${{ env.GITHUB_REF_NAME }}
        aws s3 cp package.tar.gz ${{ env.S3_BUCKET }}/${{ env.GITHUB_REF_NAME }}/
        aws s3 cp zetacored ${{ env.S3_BUCKET }}/${{ env.GITHUB_REF_NAME }}/
        aws s3 cp zetaclientd ${{ env.S3_BUCKET }}/${{ env.GITHUB_REF_NAME }}/
        aws s3 cp indexer ${{ env.S3_BUCKET }}/${{ env.GITHUB_REF_NAME }}/
        aws s3 cp deploy/zetaclientd-start.sh ${{ env.S3_BUCKET }}/${{ env.GITHUB_REF_NAME }}/zetaclientd-start.sh
        aws s3 cp deploy/zetacored-start.sh ${{ env.S3_BUCKET }}/${{ env.GITHUB_REF_NAME }}/zetacored-start.sh

    - name: Update Latest Deployment ID SSM Parameter
      run: aws ssm put-parameter --overwrite --name '/deployments/latest-deployment-id' --value ${{ env.GITHUB_REF_NAME }}  > /dev/null 2>&1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: zetachain
        IMAGE_TAG: latest
      run: |
        docker build -f Dockerfile.zetacore_binary -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Create GitHub Release for ZetaCore/ZetaClient
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/athens')
      with:
        token: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}
        files: |
          zetacored
          zetaclientd

    - name: Create GitHub Release for ZetaChain Indexer
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/indexer')
      with:
        token: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}
        files: |
          indexer
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set Environment Variables"
      run: |
        GITHUB_REF_NAME=${{ github.ref_name }}
        GITHUB_REF_NAME=$(echo $GITHUB_REF_NAME | tr '//' '-')
        echo $GITHUB_REF_NAME
        
        if [[ $GITHUB_REF_NAME == "develop" ]]; then 
          export ENVIRONMENT_NAME=STAGING
          export S3_BUCKET=s3://zetachain-deployment-files-staging
          export UPDATE_INDEXER=TRUE
          export UPDATE_NODES=TRUE
        elif [[ ${GITHUB_REF_NAME:0:8} == "athens-v" ]] ; then 
          export ENVIRONMENT_NAME=ATHENS  
          export S3_BUCKET=s3://zetachain-deployment-files-athens
          export UPDATE_INDEXER=FALSE
          export UPDATE_NODES=TRUE
        elif [[ ${GITHUB_REF_NAME:0:8} == "indexer-v" ]] ; then 
          export ENVIRONMENT_NAME=ATHENS  
          export S3_BUCKET=s3://zetachain-deployment-files-athens
          export UPDATE_INDEXER=TRUE
          export UPDATE_NODES=FALSE
        else 
          echo "ERROR: Unknown value for 'github.ref_name' $GITHUB_REF_NAME"
          echo "Exiting"
          exit 1   
        fi

        echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
        echo "ENVIRONMENT_NAME=$ENVIRONMENT_NAME" >> $GITHUB_ENV
        echo "UPDATE_INDEXER=$UPDATE_INDEXER" >> $GITHUB_ENV
        echo "UPDATE_NODES=$UPDATE_NODES" >> $GITHUB_ENV
        echo "Environment Name:$ENVIRONMENT_NAME"
        echo "GITHUB_REF_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV


    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update 

    - name: Configure AWS Staging credentials
      if: ${{ env.ENVIRONMENT_NAME == 'STAGING' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID_SPARTA }}          
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_SPARTA }}          
        aws-region: ${{ env.AWS_REGION }}

    - name: Configure AWS Athens credentials
      if: ${{ env.ENVIRONMENT_NAME == 'ATHENS' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID_ATHENS }}          
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ATHENS }}          
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Deployment ID
      run: |
        export GITHUB_REF_NAME=$(aws ssm get-parameter --name '/deployments/latest-deployment-id' | jq .Parameter.Value -r)
        echo "GITHUB_REF_NAME=${{ env.GITHUB_REF_NAME }}" >> $GITHUB_ENV

    - name: Snapshot Validator Instances
      run: |
        INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:Chain,Values=zetachain" "Name=tag:Role,Values=validator" "Name=instance-state-name,Values=running" | jq -r '[.Reservations | .[] | .Instances | .[]] | .[] | .InstanceId')
        while IFS= read -r INSTANCE_ID; do
            echo "$INSTANCE_ID"
            aws ec2 create-snapshots \
              --instance-specification InstanceId=$INSTANCE_ID,ExcludeBootVolume=true \
              --description "Snapshot Prior To Deployment ID: ${{ env.GITHUB_REF_NAME }}" \
              --copy-tags-from-source "volume" > jq
        done <<< "$INSTANCE_IDS"
        sleep 2

    - name: Copy Package Files
      if: ${{ env.UPDATE_NODES == 'TRUE' }}
      run: |
        source build/bash_functions
        COMMAND_ID=$(run_ssm_cmds_nodes "aws s3 cp ${{ env.S3_BUCKET }}/${{ env.GITHUB_REF_NAME }}/package.tar.gz /tmp, mkdir /deployment-files/${{ env.GITHUB_REF_NAME }}, tar -xzvf /tmp/package.tar.gz -C /deployment-files/${{ env.GITHUB_REF_NAME }}")
        check_cmd_status $COMMAND_ID
        COMMAND_ID=$(run_ssm_cmds_api_nodes "aws s3 cp ${{ env.S3_BUCKET }}/${{ env.GITHUB_REF_NAME }}/package.tar.gz /tmp, mkdir /deployment-files/${{ env.GITHUB_REF_NAME }}, tar -xzvf /tmp/package.tar.gz -C /deployment-files/${{ env.GITHUB_REF_NAME }}")
        check_cmd_status $COMMAND_ID

    - name: Stop ZetaChain
      if: ${{ env.UPDATE_NODES == 'TRUE' }}
      run: |
        source build/bash_functions
        COMMAND_ID=$(run_ssm_cmds_nodes "systemctl stop zetaclientd && systemctl stop zetacored")
        check_cmd_status $COMMAND_ID
        COMMAND_ID=$(run_ssm_cmds_api_nodes "systemctl stop zetacored")
        check_cmd_status $COMMAND_ID

    - name: Update ZetaNode Binaries
      if: ${{ env.UPDATE_NODES == 'TRUE' }}
      run: |
        source build/bash_functions
        COMMAND_ID=$(run_ssm_cmds_nodes "\
          cp /deployment-files/${{ env.GITHUB_REF_NAME }}/zetaclientd /home/zetachain/go/bin/zetaclientd, \
          cp /deployment-files/${{ env.GITHUB_REF_NAME }}/zetacored /home/zetachain/go/bin/zetacored, \
          cp /deployment-files/${{ env.GITHUB_REF_NAME }}/deploy/zetaclientd-start.sh /home/zetachain/zetaclientd-start.sh, \
          cp /deployment-files/${{ env.GITHUB_REF_NAME }}/deploy/zetacored-start.sh /home/zetachain/zetacored-start.sh, \
          cp /deployment-files/${{ env.GITHUB_REF_NAME }}/network_values /etc/zetachain/network_values")
        check_cmd_status $COMMAND_ID

        COMMAND_ID=$(run_ssm_cmds_api_nodes "\
          cp /deployment-files/${{ env.GITHUB_REF_NAME }}/zetaclientd /home/zetachain/go/bin/zetaclientd, \
          cp /deployment-files/${{ env.GITHUB_REF_NAME }}/zetacored /home/zetachain/go/bin/zetacored, \
          cp /deployment-files/${{ env.GITHUB_REF_NAME }}/deploy/zetaclientd-start.sh /home/zetachain/zetaclientd-start.sh, \
          cp /deployment-files/${{ env.GITHUB_REF_NAME }}/deploy/zetacored-start.sh /home/zetachain/zetacored-start.sh, \
          cp /deployment-files/${{ env.GITHUB_REF_NAME }}/network_values /etc/zetachain/network_values")
        check_cmd_status $COMMAND_ID

    - name: Restart ZetaChain
      if: ${{ env.UPDATE_NODES == 'TRUE' }}
      run: |
        source build/bash_functions
        COMMAND_ID=$(run_ssm_cmds_nodes "systemctl restart zetaclientd && systemctl restart zetacored")
        check_cmd_status $COMMAND_ID
        COMMAND_ID=$(run_ssm_cmds_api_nodes "systemctl restart zetacored")
        check_cmd_status $COMMAND_ID

    - name: Update Indexer
      if: ${{ env.UPDATE_INDEXER == 'TRUE' }}
      run: |
        source build/bash_functions
        COMMAND_ID=$(run_ssm_cmds_indexer "aws s3 cp ${{ env.S3_BUCKET }}/${{ env.GITHUB_REF_NAME }}/package.tar.gz /tmp, mkdir -p /deployment-files/${{ env.GITHUB_REF_NAME }}, tar -xzvf /tmp/package.tar.gz -C /deployment-files/${{ env.GITHUB_REF_NAME }}, \
        systemctl stop indexer &&  cp /deployment-files/${{ env.GITHUB_REF_NAME }}/indexer /usr/local/bin/indexer && systemctl start indexer")
        check_cmd_status $COMMAND_ID

