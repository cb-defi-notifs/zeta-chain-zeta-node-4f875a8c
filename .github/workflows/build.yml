name: Build

on:
  push:
    branches:
      - develop
      - athens2-develop
    tags:
      - v*
      - athens2-*
  pull_request:
    branches: 
      - develop
      - athens2-develop 
    types: 
      - synchronize
      - opened
      - reopened
      - ready_for_review

env:
  S3_BUCKET_NAME: "zetachain-deployment-files"
  AWS_REGION: "us-east-1"
  GITHUB_REF_NAME: "$(echo ${{ github.ref_name }} | tr '//' '-')"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v3

    - name: setup-git-credentials
      uses: de-vri-es/setup-git-credentials@v2.0.8
      with:
        credentials: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }} 

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build zetacored and zetaclientd
      run: |
        make install
        cp "$HOME"/go/bin/* ./

    - name: Test
      if: ${{ env.GITHUB_REF_NAME != 'athens2-develop' }}
      run: |
        echo "Running Build Tests"
        go test -v -coverprofile coverage.out  $(go list ./... | grep -v /x/zetacore/)
  
    - name: Save Binaries as Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ github.sha }}
        path: |
            zetacored
            zetaclientd 
        
  smoke-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v3

    - name: Install Docker Compose
      if: ${{ env.ACT }}
      run: |
        sudo apt-get update
        sudo apt-get install \
          ca-certificates \
          curl \
          gnupg \
          lsb-release
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get install docker-compose-plugin
        #sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

    - name: Start Private Network
      if: ${{ env.GITHUB_REF_NAME != 'athens2-develop' }}
      run: |
        cd contrib/localnet
        docker compose build zetacore0 eth && docker compose build orchestrator
        docker compose up -d zetacore0 zetacore1 zetaclient0 zetaclient1 eth bitcoin

    - name: Run Smoke Test
      if: ${{ env.GITHUB_REF_NAME != 'athens2-develop' }}
      run: |
        cd contrib/localnet
        docker compose up orchestrator --exit-code-from orchestrator
        if [ $? -ne 0 ]; then
          echo "Smoke Test Failed"
          exit 1
        fi

  upload:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: 
      - build-and-test
      - smoke-test
    steps:
    - uses: actions/checkout@v3

    - name: setup-git-credentials
      uses: de-vri-es/setup-git-credentials@v2.0.8
      with:
        credentials: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }} 

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v6

    - name: Set branch name
      id: set-branch-name
      run: | 
        tag_check=`echo '${{github.ref}}' | grep 'tags'` || echo "proceed"
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Setting the current branch name to same as the source branch of the PR"
          RELEASE_NAME=$(sed 's#/#-#g' <<< ${{ github.event.pull_request.head.ref }})
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          TAG_NAME="$RELEASE_NAME-$(git rev-parse --short HEAD)"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        elif [ ! -z "${tag_check}" ]; then
          echo "Tag Event, Set RELEASE and TAG NAMES accordingly."
          echo "TAG_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo $TAG_NAME
          echo $RELEASE_NAME
        else
          RELEASE_NAME=$(sed 's#/#-#g' <<< ${{ steps.branch-name.outputs.current_branch }})
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          TAG_NAME="$RELEASE_NAME-$(git rev-parse --short HEAD)"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        fi

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - uses: actions/download-artifact@v3
      with:
        name: binaries-${{ github.sha }}
        path: ./

    - name: Build Zetavisor
      if: false # Not needed - Building cosmovisor should be part of the zetavisor repo
      run: |
        go get github.com/zeta-chain/cosmos-sdk/cosmovisor/cmd/cosmovisor@zetavisor-v0.1.3
        go install github.com/zeta-chain/cosmos-sdk/cosmovisor/cmd/cosmovisor@zetavisor-v0.1.3
        cp "$HOME"/go/bin/cosmovisor ./cosmovisor

    - name: Install AWS CLI # Used for local testing of Git Actions
      if: ${{ env.ACT }}
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update 

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}       
        aws-region: ${{ env.AWS_REGION }}

    - name: upload-files-to-s3
      uses: ./.github/actions/upload-to-s3
      with:
        bucket-name: ${{ env.S3_BUCKET_NAME }}
        release-name: ${{ env.RELEASE_NAME }}
        git-sha: ${{ github.sha }}
        files: |
          zetacored
          zetaclientd

    - name: Build, tag, and push docker images
      uses:  ./.github/actions/build-docker-images
      with:
        DOCKER_FILENAME: Dockerfile
        REPOSITORY_NAME: zeta-node
        IMAGE_TAG: ${{ env.TAG_NAME }}
        GHCR_USERNAME: ${{ secrets.PAT_GITHUB_SERVICE_ACCT_USERNAME }}
        GHCR_TOKEN: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}

    # # Approval will be required closer to mainnet
    # - name: Require Approval To Create a Release
    #   uses: softprops/action-gh-release@v1
    #   if: startsWith(github.ref, 'refs/tags/athens')
    #   with:
    #     token: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}
    #     files: |
    #       zetacored
    #       zetaclientd

    - name: Create GitHub Release for ZetaCore/ZetaClient
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        token: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}
        files: |
          zetacored
          zetaclientd
