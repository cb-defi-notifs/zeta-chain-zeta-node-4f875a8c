name: 'Create Cosmovisor Proposal'
description: 'WIP - Does cosmovisor stuff '
inputs:
  RELEASE_NAME:  
    description: 'Name of GitHub tag or release (Usually $GITHUB_REF_NAME)'
    required: true
  VERSION:  
    description: 'Version number for the release (0.0.1)'
    required: true
  DESCRIPTION:  
    description: 'Description of the upgrade'
    required: false
    default: "Description"
  S3_BUCKET_NAME:  
    description: 'S3 Bucket Name'
    required: true
  CHECKSUM_ZETACORED:  
    description: 'Hash value of the zetacored binary'
    required: false
    default: ""
  CHECKSUM_ZETACLIENTD:  
    description: 'Hash value of the zetaclientd binary'
    required: false
    default: ""
  CHAIN_ID:  
    description: 'Chain ID for the upgrade'
    required: false
    default: "athens-1"
  API_ENDPOINT:  
    description: 'Endpoint to query the active ZetaChain API'
    required: false
    default: "https://api.staging.zetachain.com"

runs:
  using: "composite"
  steps:
    - name: Set ENV Variables
      run: |
        echo Running Cosmovisor Upgrade Action
        echo "RELEASE_NAME=${{ inputs.RELEASE_NAME }}" >> $GITHUB_ENV
        echo "VERSION=${{ inputs.VERSION }}" >> $GITHUB_ENV
        echo "DESCRIPTION=${{ inputs.DESCRIPTION }}" >> $GITHUB_ENV
        echo "S3_BUCKET_NAME=${{ inputs.S3_BUCKET_NAME }}" >> $GITHUB_ENV
        echo "CHECKSUM_ZETACORED=${{ inputs.CHECKSUM_ZETACORED }}" >> $GITHUB_ENV
        echo "CHECKSUM_ZETACLIENTD=${{ inputs.CHECKSUM_ZETACLIENTD }}" >> $GITHUB_ENV
        echo "CHAIN_ID=${{ inputs.CHAIN_ID }}" >> $GITHUB_ENV
        echo PATH="$PATH:$(pwd)" >> $GITHUB_ENV

      shell: bash

    - name: Get Upgrade Height 
      run: |
        API_ENDPOINT=${{ inputs.API_ENDPOINT }}
        echo API_ENDPOINT:$API_ENDPOINT
        CURRENT_HEIGHT=$(curl -X GET "$API_ENDPOINT/cosmos/base/tendermint/v1beta1/blocks/latest" -s | jq -r .block.last_commit.height)
        echo CURRENT_HEIGHT:$CURRENT_HEIGHT
        UPGRADE_HEIGHT=$(($CURRENT_HEIGHT+120))
        echo UPGRADE_HEIGHT:$UPGRADE_HEIGHT
        echo "UPGRADE_HEIGHT=$UPGRADE_HEIGHT" >> $GITHUB_ENV
      shell: bash

    - name: Create & Submit Proposal 
      run: |
        source ${{ github.action_path }}/functions

        BUCKET_PATH="https://$S3_BUCKET_NAME.s3.us-east-1.amazonaws.com/$RELEASE_NAME"
        echo BUCKET_PATH:$BUCKET_PATH
        echo UPGRADE_HEIGHT: ${{env.UPGRADE_HEIGHT}}

        COMMAND_ID=$(aws ssm send-command \
          --targets Key=tag:Name,Values=node0  Key=tag:Chain,Values=zetachain \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=['export HOME=/home/zetachain && \
            /home/zetachain/.zetacored/cosmovisor/genesis/bin/zetacored tx gov submit-proposal software-upgrade $VERSION \
              --from val \
              --deposit 10000000stake \
              --upgrade-height $UPGRADE_HEIGHT \
              --description \"$DESCRIPTION\" \
              --title \"$RELEASE_NAME\" \
              --keyring-backend test \
              --chain-id \"$CHAIN_ID\" \
              --upgrade-info \'{\"binaries\":{\"linux/arm64\":\"$BUCKET_PATH/zetaclientd\",\"linux/amd64\":\"$BUCKET_PATH/zetacored\"}}\' \
              --yes']" | jq .Command.CommandId -r || exit 1)

        echo COMMAND_ID: $COMMAND_ID
        check_cmd_status $COMMAND_ID

      shell: bash

    - name: Vote on Proposal (All Validator Nodes)
      run: |
        #Get Proposal ID 
        source ${{ github.action_path }}/functions
        
        COMMAND_ID=$(aws ssm send-command \
          --targets Key=tag:Role,Values=validator  Key=tag:Chain,Values=zetachain \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=['export HOME=/home/zetachain && /home/zetachain/.zetacored/cosmovisor/genesis/bin/zetacored tx gov vote \$(/home/zetachain/.zetacored/cosmovisor/genesis/bin/zetacored q gov proposals --reverse -o json | jq -r .proposals[0].proposal_id) yes --from val --keyring-backend test --chain-id $CHAIN_ID --yes']" | jq .Command.CommandId -r || exit 1)
        
        echo COMMAND_ID: $COMMAND_ID
        check_cmd_status $COMMAND_ID
      shell: bash

